데이터 아키텍처
ch1. 정보 아키텍처
1. 엔터프라이즈 정보 아키텍처
데이터 아키텍처는 전통적인 정보공학방법론의 첫번째 스테이지에 정보전략 기획에서 정보 아키텍처를 수립하는 과정에 포함하여 정의해옴.
데이터 아키텍처를 이해하기 위해 먼저 엔터프라이즈 정보 아키텍처를 알아본다.
데이터 아키텍처는 데이터를 최초로 발견하고 도출하여 엔터프라이즈 차원의 틀을 갖춰놓는것을 의미.??

엔터프라이즈 정보 아키텍처의 구조는 일반적으로 사명+목표+전략
목표는 smart하게 정의해야함. 
전략은 목표를 달성하기 윈한 수단.방법이므로 
CSF critical success facrt?주요성공요소
Key performance indicate 핵심 성능 지표
비즈니스 아키텍처 = 비즈니스 성공하기 위한 틀

information needs 정보요구는 비즈니스 아키텍처를 우리 활동과 데이터로서 연결해주는 연결고리, 비즈니스 수행하는 상황을 파악할 수 있는 중요한 창구라 할수있다.
정보요구사항이 얼마나 긴급하고 중요한지에 따라 우선순위 정의. 
정보요구는 비즈니스 활동과 데이터를 정의하기 위한 첫번째작업. 비즈니스 아키텍처를 연결하는 연결고리. 데이터 최초로 발견하기 위한 기본적 구조. 모든 업무 활동은 비즈니스 아키텍처를 지향하므로 비즈니스 전략을 수행하는 기반. 비즈니스 전략을 수행하는 정보전략. 이때서야 정보시스템이라 할 수있다.

2. 정보요구에서 비즈니스 활동과 데이터 정의 시작
비즈니스 아키텍처로 부터 정보요구가 도출됨. 거기서 우린 업무적활동과 데이터를 도출 할 수 있다.정보시스템. 데이터와 활동은 서로 상관관계가 있다.
둘은 비즈니스 아키텍처를 실현할 수 있는 정보시스템으로서 정의가된다.
우선순위를 통해 긴급한 활동을 먼저 시스템화하고 데이터를 갖춤으로서 정보요구 만족시키는

예시로 정보요구에서 활동과 데이터를 정의하는걸 본다.
활동과 데이터를 정련하려면 서로의 작용성을 고려해서.

3. 4PMs 이해하기
방법론의 기본적 구조인 4PMs .
엔지니어링을 성공적으로 수행하기 위핸 목적으로 정의된 모든 방법론은 기본적으로 4가지로 정의ㅊ
1)프로젝트 매니지먼트 : 달성해야하느 임무와목표를 정의하여 그걸 달성하기위해 소요되는 비용,일정을 정의하고 관리하는 활동
2)프로세스 매니지먼트 :  정의된 목ㄹ표와 전략을 달성하기위해 반드시 수행해야 하는 활동 프로세스를 정의하고 관리
3)프로덕트 매니지먼트 : 프로세스 수행됨으로써 얻어지는 산출물을 정의하고 그것을 관리하는 활동
4)피플 매니지먼트 : 프로세스 수행하는 역할자를 정의하고, 역할자가 수행학을 역할을 관리하는 활동
RAEW- Responsibility, Authority, Expertisement, Work 균형 조절해야

4PMs는 엔터프라이즈 엔지니어링의 관점에서 우리 기업이 움직여가는 비즈니스 아키텍처 부분은 프로젝트 매니지먼트 부분과 의미를 같이 할 수 있고, 비즈니스 아키텍처를 실현하기 위한 비즈니스 활동은 비즈니스  아키텍처를 실현하는 반드시 수행해야하는 프로세스 매니지먼트와 동일한개념.
비즈니스 활동을 수행하므로써 얻어진 결과인 데이터를 관리해나가는 데이터 매니지먼트와 동일한 개념은 프로덕트 매니지먼트
활동을 수행해나가는 역할자에 대하 ㄴ휴면 엔지니어링은 피플 매니지먼트

비즈니스 아키텍처는 4PMS와 동일한 개념으로서 설정된다.
엔터프라이즈 엔지니어링은 지속적으로 매니지먼트해나가는 활동이고 그 결과인 데이터가 지속적으로 관리되어야한다.

4. 프로덕트 계층 구조 이해하기
4PMs 중 3번째인 프로덕트 매니지 먼트의 프로덕트는 논리적 계층 구조를 갖고있다.
최상위에 체제 - 체계- 모형 - Diagram - 객체model
체지는 우리가 갖추려는 전체적인 시스템 매카니즘의 최상위. architecture는 한눈에 보기 좋게 정리해놓은 모델로 구성되고 모델은 다이어그램으로, 다이어그램은 객체와 모듈로 구성된다.

엔터프라이즈 아키텍처
보면 what은 데이터, how는 function, where는 function이 수행되는 데이터가 존재하는 위치인 네트웤 의미, who는 역할자, time은 function 수행되는 시점, why는 function수행되는 비즈니스의 motivation. 이렇게 6하원칙으로 표현. 
5개 관점으로 구분했는데
첫번째 관점인 planner 관점은 데이터 아키텍처를 나타냄. 두번째 관점인 관리자 관점으로 개념적 모델을 형성. 세번째는 논리적 데이터 모델로서 설계자 입장에서 시스템 모델 형성 . 그담은 물리적 데이터 모델로서 기술자가 실질적인 모듈과 시스템을 갖추는 관점에서 정의. 종합적으로 단계를 거쳐서 얻어진 마지막 단계는 데이터에대한 정의, 업무적인 입장에선 프로그램, ... 비즈니스 룰로서 포현. 
프로덕트 계층구조를 사용자 관점에서 깊이를 나눠서 표현

정보공학 관점에서 보면 정보전략기획을 통해서 데이터 아키텍처를 정립하고, 데이터 아키텍처에서 비즈니스 영역을 설정하여 깊이를 가진 데이터 모델을 만든다. 그게 개념 데이터 모델. 그게 데이터 아키텍처보단 상세하지만  outline 정립해놓은거. 깊이있는 접근 방식을 통해서 논리 데이터 모델-> 실현가능한 물리 데이터 모델 -> 바로 구축될수있는 DDL 로 형성. 
정보공학 관점에서도 프로덕트에 대한 깊이가 이렇게 표현되므로 프로덕트 계층구조를 잘 수행하고 있다고 볼 수 있다.

프로덕트 계층 구조는 모든 다이어그램들이 서로 연관관계를 갖고 종합적으로 갖춰져서 데이터베이스 설계로 되고 실질적으로 구축된다.
프로덕트는 모든것들이 연결이되어서 하나의 완성된 다이어그램으로서 정의되고 시스템이 갖추게 되는것. 
한부분이 너무 상세하거나 너무 개략적이면 부족한 면이 발생할 수 있다.

ch2. 데이터/업무활동/상호작용 아키텍처
1. 정보요구에서 비즈니스 활동 정의하기
비즈니스 아키텍처를 기반으로 정보요구 도출하고 정보요구로 부터 비즈니스 활동(업무기능) 도출한다.

업무기능 분할도는 0레벨는 전사적 업무기능. 무슨활동을 장기적으로 해나가야 하는지 정의. 
B를 수행하기 위해서 장기적으로 E,F를 지속적으로 해야한다고 분할.
크기가 비슷한 업무들끼리 같은 레벨. 형제sibling 업무 기능. 

업무기능 의존도를 통해서 업무기능 우선순위를 결정하므로써 업무기능분할이 잘되어있는지 점검한다. 
업무기능 분할은 서로의 의존적 관계를 정의하므로서 정련화 할 수 있다.
제품연구개발이 이뤄진 후에 제품 판매가 되니 , 그렇게 의존적 관계. dependency,  중요함

업무기능은 이벤트로 이뤄질 수 도있고, 의존적 관계에 의해 순서대로 이뤄질 수 있다.! 우선순위대로

2. 정보요구에서 데이터 정의하기
데이터도 정보요구에서 도출된다. 도출된 데이터는 여러개의 주제영역으로 나눠서 명확화한다.
주제영역을 통해서 주제영역에 들어가있는 핵심개념인 데이터 집합을 엔티티라고 한다. 
고객이라는 개념의 범주(주제영역)속에 고객 그자체가 엔티티. 엔티티유형은 집합군. 
명명규칙은 사람들이 쉽게 인식할 수 있는 단어로 선정. 데이터에 대한 명명과 업무활동에 대한 명명을 혼동하는 경우가 있다. 그래서 엔티티에 대한 명명은 명사로, 업무활동의 명명은 동사로 명명해야한다.

엔티티 유형은 반드시 정보요구로부터 도출되어야한다. 어떤 정보요구로 부터 도출되엇는지에 대해서 가치를 평가?
엔티티 유형은 혼자 고립된 상태로 표현될 순 없다.

3. 비즈니스 활동과 데이터, 상호작용성 정의하기
정보요구로 부터 나온 비즈니스 활동인 업무기능과 , 데이터인 엔티티유형은 상호작용 관계성이 있다.
그걸 칙화적 데이터 묶으면 DB
관계형 DB에선 숫자,문제, 이미지/ 영상, 문서,소리,지도는 특별한 DB에서 가능

데이터모델은 직사각형으로/ 비즈니스 활동모델은 라운드된 직사각형으로 꼭 표현한다.
독립적이지만 서로의 관계성으로 묶음화 될 수 도있다.
묶음화로 새로운 비즈니스 시스템, 데이터 스토어가 구성될수있다.
업무영역은 관계성, 친화성이 집중된 비즈니스 시스템끼리의 묶음
=>비즈니스 활동에 의한 결과가 데이터고, 데이터는 어느 비즈니스 활동에 의해서 만들어지고 쓰여지는지를 상호작용성 모델통해서 정립되지 않으면 비즈니스 활동과 데이터는 존재할 수 없다!

업무기능의 활동은 엔티티를 바꾸는거! 
CRUD매트릭스에서는 일단 무슨 업무기능에서 엔티티유형을 무슨 CRUD를 하는지 정리하고
매트릭스 사선으로 C와 U  변경하는 값이 모이도록 엔티티 컬럼을 이동! 그럼 박스가 나타난다. 그 박스 안에 있는 친화적인 업무기능이 비즈니스 시스템!
데이터를 저장하는 공간과 같은 개념으로 데이터 스토어 정의 내린다

ch3. 데이터 아키텍쳐에서 데이터베이스
1. 데이터 친화성 묶음화로 데이터베이스 정의하기
CRUD 매트릭스를 통해서 정렬화된 데이터는 친화도 분석에 의해서 묶음화 한다. 
복잡하므로 특별한 툴로 계산해야함. 
가치흐름에의한 묶음화는 고객중심! 상당히 복잡! 좋은 기법임.

업무기능 친화도 묶음화는 비즈니스 시스템
시스템이 여러개 있는게 비즈니스 area로 구성된다.  관련된 영역들을 묶어서 하나의 프로젝트 시스템.
엔티티 유형 친화도 묶음화는 데이터 스토어
데이터 베이스를 설계하는 또하나의 데이터 스토어 그룹으로서 영역이 존재하게 된다.
데이터 스토어는 향후의 데이터베이스의 이름으로 쓰일 수 있다.

2. 데이터 분산 분석 및 볼륨 산정하기
데이터 분산 분석을 위해 먼저 업무처리/수행 위치 빈도 파악한다.
x축은 business location / y축은 business process . 월평균 100회 이상인 빈도인 걸 선정. 연평균 도 선정해서 비즈니스 시스템 정의서 작성
엔티티유형의 빈도도 파악한다. 위치별로! 이건 데이터 스토어 프로파일을 작성.
업무처리의 위치별로 점유도 매트릭스도 작성한다.
엔티티유형도 위치별로 점유도 매트릭스 작성한다. 부분적 존재? 함께 존재 ? 이걸로 데이터 분산 전략 결정한다!

데이터 볼륨 산정하기
db 매니지먼트 시스템마다 살짝 다를수도 있지만.
비즈니스를 수행하는 사람이 데이터 아키텍처 수행하는 과정해서 최소최대평균성장률 갖고 정의
기술자적 관점에서 데이터 길이나 건수를 파악해서 예측 산정하는게 아니라 , 데이터 아키텍처적 입장에서 비즈시는 성장성 근거로 산정해야한다.

3. 데이터 베이스 관리 시스템( DBMS ) 결정하기
dbms 결정하기 위해선 데이터스토어 기반으로 출발하는게 바람직
많이 발전되가고 있다. 최초는 sql relations table

계층적 DB는 확장하기가 어려움. 예측해야하니 어려움.  관계형 db는 확장성 용이.

뒤의 두개는 폰에 있음!!!


데이터 모델링
ch1. 데이터 모델링 개념
데이터를 모델링 하는 이유
엔터프라이즈 비즈니스 활동의 결과인 데이터를 모형과 같이 구체적으로 정의해서 참여하는 인원이 한눈에 볼수있도록 정의

모델링이 가지는 의미
엔터프라이즈에 대한 전체적인 엔터프라이즈 개념을 구체적으로 업무활동에 대한 부분을 한눈에 볼 수 있게 만들어 놓은것이 데이터모델. 업무활동 모델이다. 

데이터 모델링은 데이터 관점에서봤을때, 최상위 데이터 아키텍처를 개념적 틀로 갖고 개념모델과 논리모델을 만들고 두개를 갖ㄱ고 물리 모델을 만든다. 시스템 지향적인 데이터 모델이 완성된다. 데이터모델은 우리가 최종적으로 배워나갈 db의 근거. 데이터아키텍처를 데이터 모델을 통해서 일관성있는db가 만들어질수있고, 이 db가 db의 존재가치를 확인할 수 있다.

정보모델은 비즈니스활동=프로세스 모델이 형성되고, 그 프로세스를 수행하므로써 얻게되는 데이터 모델을 형성한다. 서로 사동-피동관계 . 두 모델은 독립적으로 존재하지만 서로의 작용성을 토행서 서로의 존재가치 검증하고 확인하게됨. 데이터 모델, 프로세스 모델 만드는 두 팀이 상호 작용을 해서 더 단단하게 만든다?

프로세스 모델은 우리가 뭘해야할지 업무활동을 도출해나가는 방법. 
데이터 모델은 어던 데이터를 관리해나가야 할건지에 대해...
상호작용모델은 프로세스 모델과 데이터 모델 검증해나가는 용도?
이 세 모델이 함께 정의가되고 관리가 될 때 우리는 엔터프라이즈 정보모델이 갖춰졌다고 말할 수 있다.

데이터 모델 표기법 (Notation)
엔티티관계도/ 객체 관계도 로 구분

엔티티관계 표기법 - 피터 첸 
고객이라는 엔티티 유형속에 역할자를 표현

정보공학 방법론은 피터첸 모델 수용해서 발전된거 고안  - 추천

엘리스바커 표기법 - 오라클 등에서 수용한 표기법

IDEF1X - erwin에서 수용한 표기법. 데이터 모델링 방법론을 확장해서 모델링 표시? 객체지향형 표기법

UML표기법 - 꽤 오랜시간 전산시스템 개발하는데 방법론으로서 도입되었다가 확장성이 널리 확장됨. UML언어 개발함.
현실세계에 적합한 모델링기법. 명확함. - 추천

엔티티 관계(ER) 모델링과 객체 모델링 비교
객체는 데이터화 활동이 함꼐 인캡슐레이트 된거!

객체모델링 : 실존적 객체가 있을 때 데이터 상태나타내는거, 행위 나타내는 거 둘다 포함되어서 정의. 명확하다! 견고한 db 설계가능
특정객체안에 데이터가 존재할 때 데이터의 상태를 변화시키는 행위들이 주변에 함계 정의되어서 결합되어있다->응축. 인캡슐레이션
객체들 사이에는 메세지로 서로의 관계성을 표현.?
차를 상위클래스, 주유형 / 버스, 슈퍼카는 subtype 부유형


Ch2. 데이터 모델 구성요소
엔티티, 엔티티 유형 정의하기
개체가 객체랑 혼동 되니 엔티티라고 하자!

엔티티유형은 BSP(business strategy plan) 결과로서 표현되어야 한다.  유니크한 속성이 있어서 식별되어야 한다. 고립된 엔티티유형은 있을 수 없다. 반드시 다른 엔티티유형과 관계성이 있는걸로 증명할 수 있다.

명명규칙은 중요! 요즘은 정보와 데이터를 혼동해서 사용함. 정보와 데이터 구분해야함. 정보는 데이터의 상위개념이니깐 정보라고 표현하면 안된다!.

주제영역은 이중선 직사각형. 그안에 직사각형이 엔티티유형

관계, 관계 유형 정의하기
비즈니스적 이유를 갖고있는 걸 관계.  관계들의 집합이 관계유형.
관계유형은 정보아키텍처에서 동사형 어휘 도출
엔티티유형은 방향성을 갖는다! 어떤 엔티티가 주체인가에 따라! 

관계군으로 한 엔티티 내에 있는 서브 엔티티를 도출 할 수도 있다.
관계연결, 관계군 분석은 향후에 어떻게 사용될 수있는지 규칙을 알려주므로 관계 정립,분석은 굉장히 중요하다.

속성, 속성유형 정의하기
엔티티유형 성격. 최소단위의 항목값이 속성! 속성값의 집합이 속성유형.  데이터 하나하나 항목
속셩유형 명명은 엔티티유형명을 쓰고 의미를 가진 수식어를 넣고 도메인명(속성값의 범위유형)을 정의함으로서 완성된다.

종류 : 기초속성유형(basic ~) / 추출 속성 유형(derived ~) / 설계 속성유형 (designed attribute type)

속성유형 중복성 배제하는게 중요. 오직 하나의 엔티티유형에 속해야한다. 데이터 모델링의 근본적 목적! 

식별자( Identifier) 정의하기
식별자 :  한엔티티 유형내의 특정 엔티티를 구분할 수 있는 속성유형 또는 관계유형
가능성이 있는 식별자는 부식별자. 식별자가 복수일때!
사람의 경우는 지문, 홍채.
하나의 속성유형으로 정의 못하면 다른 속성유형 결합해서 정의 가능 - 이름은 중복되지만 이름+생년월일 이거는 가능할수도
식별자는 비즈니스 관점에서 용어. 키는 물리적 개념이므로 여기선 식별자라는 용어를 써야함!

구조적 규칙 정의하기
데이터를 지속적으로 관리해나갈때 품질높은 수행결과를 얻으려 할때 비즈니스 규칙이 필요한다.
비즈니스규칙은 구조적규칙과 행위적 규칙. 여기선 구조적 규칙 중심!

엔티티유형 규칙은 파생규칙(생성,삭제)과 무결성 규칙으로 나눈다. 엔티티가 존재하냐 안하냐의 제약조건
관계유형규칙은 파생규칙(연결,단절)과 무결성 규칙을 갖고 있다. 
속성유형규칙도 파생규칙(상태(고객등급)에 의해 특정속성값(수수료율) 설정) 과 무결성 규칙
데이터모델을 구성하는 주요요소의 구조적 규칙을 알아봤다~! 규칙들 자체내에 정의해놓고 데이터 무결성유지

속성값 정의하기
종류 : 기초속성유형(basic ~) / 추출 속성 유형(derived ~) / 설계 속성유형 (designed attribute type)  -결합하는 기존의 속성유형의 개념이 흐트러지지 않고 그값이 그대로 사용

복수 값 속성 유형 분할 독립 시키는거 Promotion 이라고 함. 


Ch3. 개념, 논리 , 물리 데이터 모델
개념, 논리 , 물리 데이터모델 구별하기
개념모델은 서로의 엔티티 유형을 발견하고 관계를 정의. 논리, 물리모델까지의 연결을 갖고간다.
보다 상세하게 분석해 나가는거. 데이터 관계 구조 정의.  

논리데이터 모델 :  개념모델을 논리적 구조로 정의. 비즈니스 규칙을 정의해서 논리적으로 데이터가 유지될 수 있는지 정의내린거. 
논리데이터 모델 완성되는 순간 db 전체적 구조 결정된다. 식별자

물리데이터 모델은 설계 단계에서 완성. 위에 두개는 기획 단계에서 환성된다. DBMS에 맞게! 기술적 용어로서 정의돔. 테이블, FK, PK

논리데이터 모델과 물리데이터 모델은 크기가 똑같. 개념모델에 비해 논리 모델이 더 상세.

데이터 아키텍처로 부터 쭉 나와서 비즈니스 전략을 실현시키는거. 
개념모델->논리모델=>물리모델 로 정의될때의 일관성을 갖춰야 한다.

데이터 관계비, 선택성 정의하기
관계비는 1:1 , 1:M , M:N .
관계비로 하나의 엔티티에 의해 다른 엔티티가 얼마나 관계되어 있는지 파악. 

관계선택성 : 항상 or Sometimes. 시점을 인식해서 정의

관계비와 관계선택성을 통합하여 관계문장 완성한다. 엔티티유형 보다 더 정련화 , 검증. 품질 개선

데이터 볼륨 정의하기
데이터 볼륨 산정하려면 엔티티 유형 인스턴스 산정해야함. 최소, 최대, 평균, 성장률(요줌은 시간 분 초단위 까지)
볼륨은 속성우형의 데이터 길이의 최소,최대치를 갖고 산정. 
속성유형을 정의하는 당시에는 varchar같은 DBMS특정 정의가 아닌 잘 알수잇는 단위로 정의하기?

비즈니스 위치분석 중요. 엔티티유형과 loaction의 관계 표시 .

예전엔 볼륨이 하드디스크 공간 확보로 중요했다. 요즘은 향후에 이 시스템이 확장해나갈수 있는가에대한 확장성 예측. 

데이터 무결성 검증하기
엔티티 무결성 규칙, 도매인 무결성 규칙, 참조 무결성 규칙
db뿐 아니라 어플리케이션 시스템에 녹아서 함꼐 움직일수 있다.

데이터 보안성 검증하기
엔터프라이즈 아키텍처에서 Who. 역할자가 어떤 위치에서 어떤 관리 하는지 6단계로 분류
사용자역할과 사용자 접근권한 분석해야함
오너쉽-데이터에 대한 책임. 스튜워드쉽 - 데이터 수행은 다른사람인데 우리가 그걸 관리해야할때(환자를 돌보는 의사같은?)
사용자역할은 CRUD매트릭스에서 y축을 사용자 역할로 정의해서 
그걸 정리해서 데이터 보안 및 프라이버시 대상목록 작성한다.
마지막으로 사용자데이터 접근권한 정리해야함. 엔티티유형별로

비즈니스 영역별 엔티티 관계(ER)도 완성하기
엔티티관계도 - 정의된 엔티티유형과 그들의 관게유형을 도형으로 표기. 현업담당자와 원활한 의사소통 위해
제일 익숙한건 정보공학표기법!


ch4. 정규화와 데이터 모델 검증
1차, 2차, 3차, 4차 정규화
정규화는 전산화시대때 데이터 모델링 하는 직접적 수단이었다. 정보화 시대에는 데이터 모델링 완성하고 정규화로 검증하는걸로 바뀜
Normalization. 목적은 중복성 최소화/ 모델 단순화/ 데이터 공유도 증대/ 데이터 일관성 확보 목적

1차정규화 : 보고서 같은 화면을 보고 그대로 데이터를 전개해나가는거. 데이터의 반복되는 속성 있으면 그걸 promotion독립화해서 하나의 엔티티유형으로 분리한다. 
2차정규화 :  주식별자 전체에 종속되지 않는 속성유형있으면 promotijon해서 하나의 엔티티유형으로 . 소속부서는 사원번호와 직접적으로 종속되지x
3차정규화 : 속성유형들끼리 의존적 관계가 형성되어있을때. 그것들을 promotion 별도의 엔티티유형으로 
->데이터 모델 완성해가는 과정. 이렇게 수행해왔음. 전산화 시대 때
4차정규화 =보이스 코드 정규화 : 특정한 엔티티 그룹의 성격을 나타내는 속성유형이 존재할 때 하부유형 정의

정규화를 통한 데이터 모델 검증
먼저 사용자 관점과 관계비 살펴봐야한다. 관점에 따라 관계비 달라짐.  부서에 직원이 있다가 다른 부서로 가면 변화된다
이력관점은 장기적인 시간에의해서 지속적 관리하며 보는거, 현황관점은 특정 시점에만 

보이스 코드 정규화 : super type과 subtype이 있다. 구분 속성이 구분속성유형. 하부유형의 구분을 결정하는 속성유형
사원에서 경영층,정비직으로 subtype 나눈다. 차량에선 승용차, 승합차, 화물차로 subtype 나눈다. 두엔티티의 속성을 비교할때 양쪽다 optional이면 subtype으로 나눈다?

엔티티 생명주기(Lifecycle) 분석을 통한 데이터 모델
엔티티 생명주기는 엔티티가 생명되고 소멸될때까지 변화하는 상태 분석. 
엔티티 상태 - 공백null/ 생성/ 과정/소멸
변화 일으키는 비즈니스 활동과 같이 검증한다. 입학지원접수, 입학수락처리, 학업완료처리
복수의 상태도 가능. 
현재 객체지향방법론의 객체 정의와 비슷.


ch5. 엔터프라이즈 통합 데이터 모델 
레퍼런스, 마스터 데이터 식별하기
마스터데이터 : 비즈니스를 이끌어나가는 중심데이터. 레퍼런스데이터와 트랜잭션 데이터와 관계. 비즈니스 활동의 주체
레터런스데이터 : 마스터 데이터 구분하고 분류하는 기준. 장기간 동일하게 유지 변화 거의x. 한 코드에 하나의 의미값. 두세개 속성있는
트랜잭션데이터 : 마스터 데이터랑 연계해 비즈니스 활동을 수행한 결과 데이터. 여러데이터와 관련성. 고객이 제품을 '주문'

레퍼런스 데이터는 맨 상위에서 있어서 마스터 데이터를 분류 하는! 계층 구조 정리
마스터 데이터는 레퍼런스 데이터 아래층에. 비즈니스 활동의 주체.  밑에 트랜잭션데이터가 있다. 1:n . 
마스터와 트랜잭셕이 1:1이면 보통 같은 계층. 그런경우 거의 없다.

마스터데이터는 통합이 젤 중요. 중복성 없게! 레퍼런스데이터는 국제적 표준에 맞게 ? 표준화 유지

업무영역 모델에서 엔터프라이즈 데이터 모델로 통합하기
엔터프라이즈 데이터 모델이 갖는 의미를 보면 비즈니스 중심적 - 장기적 관점. 현업과 의사소통 수단.비즈니스 용어로.
개발중심적 - 현재는 이게 더 많다? 프로젝트 관점에서 데이터 모델 만들어짐. 비즈니스 합리적 접근방식 저해할수도 있다.
비즈니스 초점으로 하는게 좋다.
업무의 영역단위로서 데이터 형성해나간다. 각자 해당되는 엔티티유형 정의하고 다른 영역과 같은지 체크후 통합 데이터 모델로 계층조정

엔터프라이즈 통합 데이터 모델 관리하기
엔터프라이즈 데이터를 프로세스와 함께 정보로서 존재.
데이터 매니지먼트는 데이터 관리자, db관리자, 리파지토리 관리자.
데이터 서비스팀은 프로세스매니지먼트, 시스템 메니지먼트, 비즈니스/정보서비스팀
메타데이터 리파지토리는 모든 정보 관장. 


데이터베이스 설계
ch1. 데이터 모델을 데이터베이스 변환
관계 모델 V2 소개
db 설계는 엔터프라이즈 데이터 통합모델을 통ㅎ해 db 관리자가 한다
관계모델은 EFCodd 박사로 의헤 관계모델 V1 나옴. (RM/V1) 
RM/V2는 RM/V1 + RM/T
3레벨개념

ANSI SPARC 스키마 소개
관계 db 구조체계 중 하나
관계 3레벨 아키텍처 -  베이스 관계 / 뷰 / 스토리지 표시
ㄴ코드 박사가 한거 이 때 쯤 미국에서 ANSI / SPARC 스카마가 나옴 - 외부, 개념,내부스키마
기존 관계 3레벨 아키텍처와 비교 할 수 있다. 비슷하다.
ANSI~ 3계층은 데이터 독립성. 어느곳이 변해도 다른곳에 변경 없이 지속적으로 사용가능하다. 

데이터베이스 구성요소 명명규칙 정의하기
비즈니스 영역분석은 what을 정의 데이터모델, 프로세스 모델 ,
비즈니스 시스템 설계는 how를 정의. 데이터 구조, 어플리케이션 구조
각 객체에대한 매핑은 논리적으론 dBMS가 관리 물리적으로 ㄴOs가 관리

db명은 대문자. 데이터 스토어명이랑 같게 / 테이블명 영어대문자 단수명사. 복합명사는 _로 / 컬럼명 : 테이블명(약어)_성격(추가)_도메인(약어)
주키,외부키는 컬럼명과 동일하게. 외부키는 FK_ 혹은 _테이블명(약어)부여
뷰,인덱스,테이블스페이스,인덱스스페이스는 내뷰규칙을 정의하여 부여
약어 사용 시 주의해야 할 점이 있다.예약어는 사용하면 안됨

데이터정의어(DDL)과 데이터운영어(DML)알아보기
DDL : 테이블 인덱스 등을 생성,변경,제거 하는데 사용하는 sql문  - create , drop, alter
DML : 데이터 삽입,삭제,변경 - select , insert , update, delete / select는 DML보단 dQL +DML
DCL : 데이터 제어어. 권한 부여,제거하는데 사용. 구조화 쿼리어 .DBA에 의해서 사용됨. GRANT , REVOKE

엔티티 유형을 테이블로 변환하기
비즈니스영역분석에서 데이터모델에 엔티티유형을 비즈니스 시스템 설계에서 데이터구조의 테이블!
fk는 어떤 테이블 참조하는지, delete옵션, update옵션- 데이터 테이블이 제거되거나 업뎃 됐을때 의 정의
테이블명은 대문자 첫자 하고 그이후는 소문자써도 된다. 요즘은 숫자랑 특문도 쓴다. 숫자는 좀 고정되거나 순서일때 이외에는 안사용하는게 좋음.

속성 유형을 컬럼으로 변환하기
비즈니스영역분석에서 데이터모델에 속성유형을 비즈니스 시스템 설계에서 데이터구조의 컬럼!
컬럼 데이터 타입 : SMALLINT, INTEGER(INT) , DECIMAL ,NUMERIC , FLOAT , DATE , CHAR, LOGICAL
INTEGER가 SMALLINT보다 범위크다고 무조건 선택하면 안돼! 정확히 예측하는게 중요

관계유형을 참조조건으로 구성하기
비즈니스영역분석에서 데이터모델에 관계유형을 비즈니스 시스템 설계에서 데이터구조의 외부키FK!
FOREIGN KEY ( FK_DPMT_ID )  REFERENCES DEPARTMENT
비즈니스 단계에선 아니구 설계 단계에선 관계 되려면 FK로 
ON DELETE 옵션이나 ON UPDATE 옵션으로 무결성 제한 조건으로. 참조무결성이 실현된다. 
FK_ 붙여서 표시하여 명확화한다. NOT NULL 이어야 함

주키, 부키 구성하기
비즈니스영역분석에서 데이터모델에 식별자을 비즈니스 시스템 설계에서 데이터구조의 주키 PK!
CREATE TABLE EMPLOYEE
(EMP_SIN      CHAR(11) NOT NULL,
EMP_NAME      CHAR(20) NOT NULL,
PRIMARYKEY(EMP_SIN),
UNIQUE (EMP_NAME ) );
UNIQUE가 부키..?
주키와 부키는 NOT NULL옵션 부여 필요. 주키는 반드시 Unique해야함. 부키는 인덱스 설정 고려 
다 모델링에서 결정된 거고 여기선 그 결과를 반영하는거뿐

물리적 데이터 구조 완성하기
물리적데이터 구조 : 데이터 를 물리적 저장장치(Storage, disk ) 에 저장하고 논리적 구조에 매핑
ㄴ 테이블 스페이스 : 하나 또는 여러개 팡리로 구성되어있는 데이터 저장 구조. 데이터는 테이블 스페이스에 저장되고 물리적 하드디스크와 매핑
ㄴ 인덱스 스페이스 : 인덱스를 저장하는 공간
테이블 스페이스에는 한개 이상의 테이블이 존재한다. 
CREATE TABLESPACE 테이블스페이스명
DATAFILE 데이터 파일 경로 -- 물리적 저장장치의 어디 파일인지
모델링을 잘했느냐에 따라 테이블스페이스 설정이 효과적으로
CREATE TABLE문에서 뒤에 TABLESPACE 테이블스페이스명을 입력한다.

요즘은 성능적관점에 초점. 비즈니스 끊기지않고 진행되도록

Ch2. 데이터베이스 성능설계 
인덱스 설계하기
인덱스는 DB 테이블에 데이터를 접근해나가는 시작점(entry point) . 주키를 대상으로 해서 반드시 하나이상.
엔티티무결성 보장 수단.
종류 : 비트리인덱스 / 비트맵역키/분배/서열 인덱스
인덱스는 pk는 반드시 인덱스 설정해야하고, fk는 인덱스 설정 고려해야한다. 성능 저하될수도
경우수가 많은 데이터는 인덱스 사용 효과 높은. 가장 변동 많은 데이터, 자주 접근되는 데이터를 맨앞으로
컬럼 배치 순서도 중요! 데이터 값 자주 변경되는 컬럼은 인덱스 설정 자제
인스턴스 적은 테이블은 인덱스 설정x(주키제외)
인덱스는 검색효율성은 높이지만 삽입,삭제,변경은 효율성 저하될수도. 

해싱, 클러스터링 하기
해싱  : 데이터가 바르게 직접 접근할 수 있는 키값을 사용하는 기법. 키값을 행의 물리적위치를 가리키는 포인터로 변환하여 사용
알고리즘은 랜더마이저 모듈 사용 (위치 결정?) 이거 사용으로 더 나은 해싱결과 나옴.
큰 자유공간을 통해 효과적기능 . 단 한번의 I/O로 조회. 데이터를 범위로 검색하는 경우에는 효과 없다. 직접적 찾아가는 방법이라. 연결,삭제 같이 직접적으로 데이터를 하나하나 지칭해야할때 ?  . 키충돌이 일어날 수도 있다.
변경이 많이 일어나고 데이터 생성이 많아지는 경우 해싱 방법을 써서 쉽게 변경처리 

클러스터링 : 지정된 컬럼값에 의해 미리 결정된 순서로 행을 저장하는 기법. 
데이터 접근기법이 아니고 접근효율성을 높이기 위한 방법. 비즈니스의 자연적 현상을 쫒아서 고정하는거! 미리정해진 순서로 테이블내의 행을 저장하는 기능.데이터 저장의 기준이되는 컬럼을 명시. 테이블을 순서에따라 처리하는경우 효과정
해싱은 데이터 건수 적은거에 효과적인데, 클러스터링은 중대형 테이블에 효과적.  INSERT,DELETE가 자구 발생하지 않아야함. 
클러스터링 기준 컬럼값 변경이 매우 적어야한다! 분포도가 높은 컬럼은 범위스캔(연단위,월단위 이런식으로)으로 클러스터링 하면 한꺼번에 조회할때 아주좋은 효과가 일어남. DBA가 하는 거임~

인터리빙 데이터 설계하기
인터리빙 데이터 : 클러스터링의 특별한 형태, 두테이블이 자주조인될떄 동일한 물리적 공간에 데이터를 물리적으로 상호배치, 테이블1과2를 동일한 파일내에 존재시키는거!  Interleaving  테이블. 
목적 : 조인 성능을 월등히 높이기 위한 방법. 주문과 주문라인아이템 같은거. 한 주문건에 라인아이템 두세개가 같은 디스크상에 한번에 배치
고려사항 : 데티어를 적재하기 전에 스크립트 구성하여 편성, 소트, 상호배치 필요 . 오직 두테이블에 현저희 많은 조인 접근이 발생하고 특별한 조인 기준 경우가 적을때 유용. 
오라클에선 상호배치형태를 지원하기 위해서 클러스터 기능을 통해 사용.


Ch3.역정규화
역정규화는 언제 하는가
역정규화 : 데이터 모델링 하는 과정이 정규화. 정규화 되어있는 엔티티유형의 데이터를 거꾸로 하는거. 
부서의 속성중에 부서명이 직원테이블에 소속부서명이 함꼐 자주 사용되면 추가해서 중복적으로 함께 관리하는거. 
데이터 접근 효율성을 확보하기 위해 데이터 베이스 설계를 조정하는 작업. 항상! 동시에 검색되고 표현되는 컬럼인 경우에만!

고려이슈 : 시스템이 역정규화 없이 인수가능 성능 달성 ? 역정규화 후 시스템 성능이 비인수가능 상태 되나? 역정규화로인해 신뢰성이 저하될건가?
성능성을 높일것인지 신뢰성을 높일것인지에 대한 답중 하나? DBA 가 지속적으로 신뢰 유지할 수 잇으면 결정

중대한 쿼리나 보고서가 여러테이블에서 데이터를 요규 하는 경우 . 반복 그룹이 개별단위가 아닌 그룹으로 처리 되는경우(월단위, 일단위이런식으로)
쿼리 답이 나오기전에 하나나 여러커럼이 많은 계산을 요구 하는 경우(부가세 계산?) .테이블이 동시간대에 다른 사용자에의해 다른 접근 요구하는경우
외부키 컬럼 가져올때 쿼리 불편하고 디스크 공간 많이 소모하는 큰 주키가 존재( 설명컬럼같은?) . 컬럼이 쿼리에 자주사용되는 경우

주의사항 :  정규화된 형태를 변경이지 정규화 자체를 하지않는건 아님. 정규화 완성된 데이터 모델에서 출발해야한다!! 신중하게.
데이터의 무결성 신뢰성 성능성 잘 따져가면서 결정해야한다.  데이터 무결성을 보장하기 위한 조치가 선행되어야 한다!

선조인( Prejoin) 테이블, 미로테이블, 분할테이블, 병합테이블 설계하기
선조인 테이블 : 두개이상 테이블이 어플리케이션에서 정기적으로 조인될 필요가 있고 조인비용이 터무니없을때 구성. 
중복 컬럼 포함하면 안됨. 절대적으로 요구되는 커럼으로 구성. 주기적으로 생성됨. 데이터 정확성 유지어려워 정적데이터에 유용한다.

미로테이블 : 매우많은 온라인 트래픽이 발생하는 테이블을 통해 의사결정과 같은 처리에 정기적으로 사용될때,똑같은 테이블을 생성 유지
고려사항- 트래픽 처리하는 전경과 의사결정하는 배경처리가 동시성 유지되는지 확인해야함! 타임아웃,교착상태 발생요인이 될 수도있다.
급하고 긴급한 의사결정을 위한 임시적 처리이다 -> 장기성 고려하면 '데이터 웨어하우스' 구축 권고

분할테이블 : 테이블 일부분이 다르고 드문 접근을 하는 그룹이나 어플리케이션에서 사용할경우, 테이블 분할.
수직적 분할테이블 - 테이블 컬럼 / 수평적 분할테이블 - 테이블 행을 분할. 그룹의 ROW가 지속적으로 쓰여질때 
고려사항 - 수직분할 시 두테이블에는 동일한 주키 컬럼 존재시켜야함.. 참조 무결성제한조건 불필요. / 수평적분할시 키 범위를 통해 그룹 형성. 주키사용

병합테이블 : 두 테이블이 1:1 관계 유형인 경우! 
고려사항 - 두테이블이 동시사용성이 높을때! 다른 한테이블에 크기가 큰 컬럼이 존재한경우 성능 효율성 검토해야함.  / 데이터 모델링 시점에 결정해야함.
테이블 병합은 역정규화라 하기보단 정규화라고 해야함. 이미 결정되어야 하는거니깐. DBA가!

데이터 중복성 관리하기
중복데이터 :  역정규화 대표적인 방법으로 한 테이블에서 하나이상 컬럼을 쿼리할 때 동시에 다른 테이블의 컬럼을 쿼리하는 경우
중복을 허용하여 조인 발생 제거하여 성능개선 / 정상적 데이터 접근이 불충분할 때 중복데이터 허용 ( 직원테이블에 부서명 컬럼 추가하는거)
허용조건 - 단지 한 두 컬럼이 중복성을 지원할 필요 잇는지! 최소한의 컬럼이! / 컬럼이 안정적이고 거의 변경 없어야 한다 / 컬럼이 매우 많은 사용자나 중요한 사용자에 의해 사용되는지 확인해야함.
고려사항 - DBA에 의해 결정되고 시행 / 데이터 무결성 유지방안 사전에 수립해서 지속적 체크해야함.

반복데이터 그룹 :  정규화를 통해 하나의 컬럼으로 정의되었지만, 반복적이고 고정된 규칙을 가진 행을 크룹 컬럼으로 재구성
구성요건 - 행내에서 합계 평균, 비교되지 않아야함 / 통계적으로 잘 정립된 패턴으로 데이터가 발생되어야 한다. / 데이터 발생수가 고정적이어야함/ 데이터 접근이 보통 집합적이어야함 / 데이터 삽입및 삭제에 대한 예측적 패턴을 가져야함. 
원랜 BALANCD_PRD , BALANCE 컬럼만 있었는데 - > PRD1_BALANCE ,PRD2_BALANCE ,.... 이렇게 바꿈. 반복적으로 항상 여러개가 들어올때. 일정하게 이렇게 들어와야함. 어플리케이션 개발자도 함께 알아야함.

파생 데이터 관리하기
파생데이터 : 데이터 모델링 과정에서 속성유형 정의할때 여러개 속성유형이 복잡한 계산 공식을 통해 데이터를 파생하는 비용이 높을 떄 , 매번 계산하는 대신, 컬럼에 파생된 데이터를 저장

저장목적 - 매번 반복적으로 계산하는 대신, 한번 계산해서 추가된 컬럼에 데이터를 저장하여 cpu및 IO성능 확보 / 복잡한 계산 알고리즘은 어플리케이션 프로그램에 저장하고 DBMS와는 별개의 자원사용

저장기준 - 파생계산을 위해 사용되는 데이터가 상대적으로 정적이어야함 / 파생계산을 수행하는 비용이 아주 높아야함 / 소스데이터가 변경되면 재계산이 신속하게 일어나야함

성능성 무결성 균형 - 파생계산에 포함된 컬럼값이 변경되었을때 파생 계산 결과가 자동으로 바뀌지 않을 수 잇으므로 , 그걸 PARITY와 같은걸 삽입시켜서 체크해야? 오프라인이나 유틸리티로 변경되는 경우도 잇으니! 정기적으로 체크해야함 Health check 정기적으로 . 
파생데이터 알고리즘을 명확히해야함!

계층 데이터 관리하기
계층 데이터 : 한테이블에 계층 구조를 가지고 상하위 관계에 대해 쿼리가 빈번히 발생할 떄 별도 테이블 생성 및 조정 허용
계층구조 역정규화를 통해 속력 테이블 생성. / 계층 레벨수를 컬럼으로 추가해서 현 레벨 표시 /  계층 구조를 별도테이블로 도출해서 관리
재귀적 관계Recursive .

부서 테이블에 상위 부서명 컬럼! 그 상위 부서명도 부서 테이블에 있는 ROW라서 그 주키를 갖고 하위 부서ROW에 FK로
스피드테이블로 구성하면 부서테이블에 CHILD_DEPT_NUM 넣어서 하위 부서명 넣고, LEVEL 컬럼 넣어서 레벨 수를 정의! 부서명과 하위부서명을 PK로

역정규화 관리방안 - 
모든 역정규화 결정 사안은 문서화해야함 / 모든 데이터가 유효하고 정확한가 확신해야함 / 데이터 이행과 전파일정 수립 / 최종 사용자에게 테이블에 대한 상태 고지 / 역정규화를 결정하기 위해 주기적으로 DB 분석
