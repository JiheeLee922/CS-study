시스템 프로그래밍은 실습 중심 ( 운영체제는 이론 중심)
재반복하면 좋다!! 80%만 이해해도 성공


Day1
리눅스(LINUX)
- 서버에 많이 사용되는 운영체제. 
- 서버는 클라이언트(웹브라우저)가 html파일 요청하면 24시간 언제든 파일 전달한다. 
     -> 서버는 성능이 좋아야함 -> 주로 서버환경은 리눅스로 쓴다
- 운영체제, 소프트웨어의 대부 UNIX계열 OS
- 서버 + 클라우드 컴퓨팅
- 윈도우는 보안프로그램 같은게 있어서 컴파일 시간이 오래 걸릴 수도있다. 그래서 아주 기본적인 리눅스 환경(kernel + shell + system기본 프로그램정도) 만 설치해서 거기서 컴파일러 돌리면 시간 굉장히 단축

리눅스 역사
- 리누스 토발즈(Linus Tovalds)가 개발 . UNIX를 가볍게 집에서 쓰고 싶어서!
- 다중사용자, 다중작업(멀티태스킹)을 지원하는 유닉스와 유사한 운영체제
- GNU(Gnu is Not Unix) : 유닉스 OS 상호 협력적 문화로 돌아가자 . 1985년에 GNU 선언문 발표
                                       GNU프로젝트 지원 위해 자유 소프트웨어 재단(FSF) 설립과 , GNU 공개 라이선스(GPL) 규약을 제공
    ㄴ GPL : GPL프로그램 맘대로 사용할 수 있지만, 사용하거나 수정 후 배포 경우 동일한 GPL라이선스로 공개해야함. 무료제공해!
- GNU Hurd : 운영체제 커널. 
- GNU 프로젝트 : 운영체제에 필요한 라이브러리, 컴파일러 ,에디터, 쉘 개발. GNU Hurd 개발 시도
                        cf)운영체제 위에서 돌아가는 에디터가 있어야 프로그램 만들고 하기 수월해짐. 
                            컴파일러가 있어야 api언어를 컴파일 해서 시스템콜 호출가능해짐
- GNU Hurd 개발이 지연되어(Editor/Shell ~ 시스템콜 여기 구간만 개발됨. ) 리누스 토발즈가 리눅스 커널 소스 오픈하여 통합개발 => GNU/Linux


-리눅스 설치방법
1. 가상머신 소프트웨어 : pc환경에 따라서, 예상치 못한 문제들을 만날 수 있다. 설치가 불가
2. 클라우드 컴퓨팅 서비스 활용 : 최신 기술에 익숙해진다는 장점./ 동일한 환경에서 사용가능/ 단 설정에 따라 진행 필요
     클라우드 컴퓨팅 서비스 : 서버환경을 미리 구축해놓고, 간단한 설정으로 바로 사용할 수 있도록 만든 서비스
     ㄴ이전에는 미리 서버 컴퓨터를 구축해야했음. 비용많이듦

aws 서비스 회원가입 , https://aws.amazon.com/ko/free 여기서 무료계정 어쩌구 누르고 이메일 주소 넣어서 가입. 정보는 영어로 -> basin plan 선택. 우리는 EC2(컴퓨터,인스턴스) 12개월 무료



Day2
- 컴퓨터에서 인터넷 서비스에 접속하려면 IP주소가 있어야한다. 서버의 IP는 고정되어야지 사람들이 서버ip에 접근 할 수 있다.
- 서버는 지역별로 생성해야한다. 내가 뉴욕에서 서비스 하고 싶으면 뉴욕지역의 서버를 새로 생성해야 함.
- 리눅스 배포판 : 리눅스는 윈도우처럼 정해진게 아니고 이것저것 내가 갖고와서 설치하는거라 충돌날 수도 있고 해서 아예 패키지로 묶은 것.
                            배포판 회사들 ex)RedHat, CentOs ,...
                            ubuntu라는 배포판 패키지를 많이 씀. 일반사용자용은 GUI환경이 디폴트 / Server는 CLI환경 , 물론 별도로 세팅해서 GUI환경할 수도 있다.

EC2(서버 = 인스턴스 ) 생성하기
Amazon 로그인 -> 헤더에 지역은 서울로 설정. -> EC2서비스 선택 -> 메인에 주황색 '인스턴스 시작' 버튼 클릭
-> Ubuntu Server 18.04 LTS (HVM), SSD Volume Type 선택 -> 인스턴스 유형 CPU, Memory, ... 하드웨어 타입 선택 
->t2.micro 선택 후 '다음:인스턴스 세부구성' 클릭 ->  '다음:스토리지추가' 클릭 -> 스토리지 최대 30기가 된다고 하니깐 30으로 바꿔주고 '다음:태그추가'클릭 -> 태그 추가는 50대~100대 이렇게 설치할 때 이름 붙여주는거. 우린 필요없으니 다음 클릭
-> 서버 접속 방법을 뭐로 쓸건지 고르는거임. 그대로 . (포트번호: 응답하고자하는 번호만 열어주는 것 ) . 다음 클릭
-> 이제 정보확인하고 '시작하기' 클릭 ->키페어 어쩌구는 일종의 공인인증서!. 첨이니깐 새키페어 생성해서 키 이름은 아무거나 funcodingjihee . 그러고 키페어 다운로드하고 잘 간직해두기!!! -> 시작.

Elastic IP 생성하기 - 고정IP
EC2 에 들어가서 왼쪽 하단부에 탄력적IP(Elastic IP)클릭 -> 탄력적 IP 주소 할당 ->할당 -> 하면 IP주소 생성 -> 선택하고 상단에 '작업'에 '주소연결' 클릭 
->인스턴스 선택. 내 인스턴스 선택'완료' ->왼쪽메뉴에서 인스턴스 클릭해서 보면 IP 생성된거 확인(바로 나오지 않는듯..?)

EC2 접속하기
*MacOS version
터미널 켜서 아까 다운로드 받은 키파일 저장되어있는 곳으로 이동 
-> chmod 400 funcodingjihee.pem (권한 변경하는 명령. 이 파일 중요하니깐 권한 제한하는거. 소유자만 읽을 수 있게! )
-> ssh -i funcodingjihee.pem ubuntu@aws에있는IP (ssh (네트워크 프로토콜) 이용해서 인증서 갖고 그 ip에 접속하겠다.)
-> 메세지 다시 체크하는거 Y 입력 -> welcome -> 그 담부턴 터미널 똑같아 보이지만 aws pc에 들어간 것이다.
보
*Windows version
pem 파일은 윈도우에서 안먹혀서 ppk파일로 만들어야 한다.
1. putty 다운로드 -> putty gen 실행 -> 밑에 RSA 2048 되어있는지 확인하고 'Load'클릭 -> pem 파일 열기
     -> Save private key 클릭 -> 예 -> funcodingjihee.ppk 입력하고 확인 -> 이제 ppk파일 생성됐으므로 putty gen프로그램 닫기
2. putty 실행 -> hostname은 ubuntu@15.165.240.245(내 aws ip) / port번호 22 되어있는거 확인하고 SSH체크 확인
-> 왼쪽메뉴에서 SSH - Auth 클릭 -> browse 클릭해서 아까 만든 ppk파일 선택
-> 다시 Session 선택해서 saved sessions 에 자기만의 이름 입력 awsjihee -> save클릭 -> open 하면 터미널 열린다.

VMware
이번강좌는 참고용! VMWare 활용! 가상머신소프트웨어 활용 맥기준! VMWare 페이지 들어가서 -> 다운로드 -> Fusion ->일정기간동안만 무료 - VMware fusion 10 pro 다운로드 클릭 ->얄어서 더블클릭해서 설치. ->vmware- file- new -다운받은 ubuntu 파일 올려주면 된다. 아이디 패스워드 원하는거 입력 -> memory customize 2ro 4GB정도로- 다하면 cmd 창같은거에 설치 한다. - 다 되면 english설치하고 다 done -..강의 참고!
구글에 ubuntu 사이트 들어가서 ubuntu server 다운로드
윈도우에서 할땐 VMWare들어가서 workstation을 다운받아서 실행하면 된다. 
->강의참고 Chapter 02. 우분투 리눅스 사용법 익히기 - 04. 리눅스 설치 with VMWare

리눅스
- 리눅스 익히면 UNIX 익히는 것과 비슷하다.
- 전역 스페이스 사용. 윈도우에선 C:/ C드라이브 이렇게 각각의 공간이 있다. 리눅스는 이렇게 안하고 모든 파일을 /media/foloet/data.jpg 이렇게.
    /은 맨 앞에 있는 root directory . 모든건 root directory로 시작하는 파일로 다룬다.
- 모든 것은 파일이라는 철학. 모든 인터렉션, 디바이스 관련 기술도 파일과 같이 다룬다.
- 리눅스 실행파일포맷 ELF (Executable and Linkable Format)  : 일종의 콜스택( 스택구조를 어떻게 가져가고, 어디서 시작하고 그런거 ) , 코드, 데이터, BSS는 어디다가 넣지 ? 프로세스 구조에서 stack이나 heap 데이터 쌓일때 위에서부터 쌓을건지 아래부터 쌓을건지 정하기 나름! 이런걸 정리한 포맷 중 하나이다.
- 다양한 시스템 리소스와 관련 . 시스템콜 호출 통해 리소스 처리 가능토록 구성 (타이머,시그널,파일, 네트웤,디바이스,ipc)
- 가상 메모리 지원 (cf>모든 os가 가상메모리 지원x. 작은 IoT같은건 가상메모리 필요없음)
- 각 프로세스는 pid(프로세스ID) 고유값으로 구분
- init 프로세스(컴퓨터 시작 때 첫번째 프로세스)를 기반으로 fork()해서 신규 프로세스 생성하니 각 프로세스 간에는 부모자식관계 갖고있다.
- OS는 사용자,리소스권한 관리 / 리눅스는 사용자,그룹으로 권한관리 / root슈퍼관리자 / 접근권한정보는 inode의 자료구조에 저장


Day3
쉘(Shell)
- 사용자와 컴퓨터 하드웨어 또는 운영체제간 인터페이스(CLI or GUI)
- 사용자의 명령을 해석해서, 커널에 명령을 요청해주는 역할
- 관련된 시스템콜을 사용해서 프로그래밍이 작성되어있다. 
- 쉘은 하나만 존재한느거 아니고 종류가 많다. 
-  Bourne-Again Shell(bash) 이 리눅스 디폴트. GNU 프로젝트 일환. <- 리눅스는 UNIX따라한거니깐 유닉스에서 많이 쓴 Korn Shell(ksh)을 따라한것

putty 켜서 저번에 저장한 aws 서버 접속하기

기본 명령어 - 쉘(bash)에서 제공하는 명령어
- (UNIX가)다중 사용자를 지원하니 관련 명령어
whoami          :  지금 사용자의 id 나온다.
passwd           : 로그인한 사용자의 암호 변경 . 첨엔 뭐 설정한게 없어서 안됨.
pwd                : 현재 자기 디렉토리 나온다.
ㄴ /home/ubuntu 이렇게 나옴. home에 자기 아이디로 디렉토리 각각 만들어진다.
useradd          : 사용자 기본설정 자동으로 안하는 것. 어색하니깐 안하는게 좋음
adduser          : 사용자 기본설정 자동 수행. /home밑에 디렉토리 만들고 하는거 같은거.
ㄴ adduser leejh ->로 추가. but 권한 없다고 뜬다.
sudo 명령어  : root 권한으로 실행. root로 로그인 안해도!
ㄴsudo adduser leejh     : 된다. 비번 입력하고 나머진 걍 엔터 후 Y
ㄴsudo passwd leejh     : tkfd2로 비번 변경

ls      :     그냥 파일 목록
ls -al :      숨김파일까지 다 나오는 파일 목록. 목록에서 파일명앞에 . 붙은게 숨김파일.
ㄴ 파일목록보면 .bashrc 랑 .profile 파일 두개가 중점적으로 사용하는 환경설정파일.
    해당 아디로 로긴하면 해당 아디의 홈디렉토리에 있는 해당 사용자의 디렉토리로 가서 .bashrc랑 .profile을 이용해 기본적인 설정 함.

su 명령어 : 사용자 변경
    su root :      그냥 지금 현재 아이디의 설정파일을 쓰면서 사용자 변경
    su -root :      바뀌는 사용자의 홈디렉토리로 가서 설정파일 쓴다.
    ㄴ su -leejh하고 비번 tkfdk2치고 pwd 명령어 쓰면 홈디렉토리 바뀐거 보인다.

sudo 명령어 : 쓰려면 해당 아디가 sudo명령어를 쓸 수있도록 미리 설정이 되어있어야 한다.
=>/etc/sudoers 설정파일에서 설정 변경가능
    ㄴ 일단 ubuntu 계정으로 넘어가야하는데 비번 없어서 못넘어감 -> putty껐다가 다시 켜고 sudo passwd ubuntu 로 비번 변경 ubuntu1
        -> cd /etc/ 로 가서 vi sudoers 명령어 치면 권한 없다고 뜬다. 이 파일 자체가 root권한 없으면 읽기도 안된다.
        -> sudo vi sudoers  하면 파일 나오는데 거기서 화살푴키로 커서를 root 어쩌구에 옮기고 shitf+v하고 y(복사)누르고 p(붙여넣기)누르면 복사됨.
        -> 복사된 라인으로 커서 옮겨서 x4번 눌러서 root지우고 i눌러서 insert모드 되면 leejh 입력 후 esc 누르고 :wq 안되면 :w! 강제저장 후 :q 닫기
        -> su -leejh 로 계정 변경하고 sudo vi /etc/sudoers하면 leejh도 sudoers 읽을 수 있다.
- 그냥 root계정으로 가서 하면 되지 굳이 sudo 써야함? sudo명령을 쓰면서 이 명령이 시스템 impact줄 수잇는 중요한 명령이니 주의하라는 의미

cd ~     : 자기 자신의 홈디렉토리로 이동
cd -      : 이동하기 전 디렉토리로 이동
cd .         : 현재 디렉토리
cd ..        : 상위 디렉토리로 이동
dir도 ls랑 똑같음. 원래 윈도우거라 ls쓰는게 좋음. 보통 ls -al로 쓴다.
와일드카드
ls host*      : host 로 시작하는 모든 파일 목록 나온다.
ls host?      : host 뒤에 한글자만 붙은 것만 나온다.
ls -al 했을때 목록에서 맨 앞에 있는 컬럼 -> 파일 권한
    ㄴ 소유자의 권한 + 소유자 그룹의 권한 + 모든 사용자에 대한 권한 
    ㄴ r :읽기, w:쓰기 , x:실행  ex) -rwxrw-r-x
    ㄴ 제일 앞에 - 이면 파일이고, d 이면 디렉토리이다.
    ㄴls -al 했을 때 나오는 정보들은 inode에서 갖고있다.

chmod     : 파일권한 명령 (change mode)
    ㄴ vi test.c로 파일 하나 만들기 i누르고 대충 dddd 입력하고 esc후 :wq 로 저장 -> ls -al로 방금 파일 권한확인
          -> chmod u=rwx,g=rw,o=rx test.c 로 권한 변경. 
    ㄴ +는 권한 더하는것/ - 는 권한 빼는 것 / = 는 권한 아예 그대로 설정. ex) chmod ug+rw fast.c
    ㄴ 숫자방법이 더 많이 쓴다. r = 4 / w = 2 / x=1  각각 더해서 표시
    ㄴ 예전에 chmod 400 funcodingjihee.pem 했을때 사용자에게만 읽기권한 줘야 ssh aws 접속 가능하니깐 이렇게 쓴것.
    ㄴ chmod -R 777 directory : 선택한 폴더의 하위폴더, 파일의 권한을 한꺼번에 바꿀때 -R / 777하면 다 rwx 된다.
chown       : 소유자 변경
    ㄴ chown [옵션] [소유자:소유그룹] [파일]
    ㄴ sudo chown leejh: test.c       : text.c의 소유자가 바뀐걸 볼 수있다.
    ㄴ chown -R root:root directory     : 디렉토리의 하위디렉토리,파일 전체다 소유자를 root로 변경
cat      : 파일보기 . vi test.c로 하면 파일 vi로 넘어가서 보지만, cat은 그냥 터미널 창에서 본다.
head      : head .bashrc  파일의 앞 10줄만 터미널에 출력
tail      : tail .bashrc  파일의 뒤 10줄만 터미널에 출력
more      :more .bashrc  터미널창에 페이징처리?되어서 창 크기에 맞게 출력. 스페이스로 페이지 넘긴다.
rm      : remove . rm test.c 하면 없어진다. 반응 없는데 리눅스는 무소식이 희소식. 
    ㄴ주로 rm -rf 디렉토리 이렇게 . r 하위 모든 파일 다 삭제 / f 강제로 삭제

쉘 사용법
command로 실행되는 프로세스는 세 가지 스트림을 갖고 있음.
-표준 입력 스트림 stdin  : 해당 커맨드에 입력으로 들어오는 옵션,인자,파일이든지 이런 입력을 해당 프로세스에 줄 수있는 통로가 뚫려있는 것.
-표준 출력 스트림 stdout : 프로세스의 실행 결과를 화면에 출력하는게 default
-오류 출력 스트림 stderr : 프로세스 실행하다가 에러났을 때 그 내용 출력. 화면에 출력이 default.


리다이렉션(redirection)
- 표준 스트림 흐름을 바꿔줄 수 있다.
- >, < 을 사용함.
- 주로 명령어 표준 출력을 화면이 아닌 파일에 쓸 때 사용.
ex)
ls -al > filelist.txt               : filelist.txt 파일 생기면서 ls -al의 출력값들이 파일로 들어간다. vi filelist.txt로 확인 !
head < filelist.txt               : filelist.txt의 내용을 head라는 프로세스의 입력스트림으로 넣는 것! head filelist.txt와 결과는 똑같다.
head < filelist.txt > filelist10.txt           :  filelist.txt의 내용을 head 입력스트림에 넣고 head의 출력 스트림은 filelist10.txt 파일로 넣는다.

- < ,> 기호는 이미 있는 파일이라면 그 내용 사라지고 새 내용 들어가는 건데 << , >> 는 뒤에 내용 추가되는 것!
ex) head < filelist.txt >> filelist10.txt      : filelist10.txt가 20줄로 된 것 확인가능


파이프 (pipe)
- ipc에서도 나온 개념. 그거랑 역할은 비슷한데 좀 다르다. 그냥 리다이렉션이랑 연결해서 이해하기! ipc랑 연결하지 말고.
- | 기호를 사용함.
- 유닉스 철학이 프로세스는 단순하고 핵심적으로 만들고, 여러 프로세스를 엮어서 사용자가 원하는 기능하게 하는 것!
    ㄴ하나는 하나의 역할만. 파이프는 두가지 프로세스가 협력해서 뭘 하는거니깐 유닉스 철학과 일맥상통
ex) cd /etc/하고
ls | grep issue : ls로 etc의 모든 목록이 나오는데 그 출력 스트림이 grep이라는 입력 스트림으로 들어간다. grep은 거기서 issue라는 키워드가 들어간 데이터를 찾아서 출력

cf)grep 명령어
grep [-option] [pattern] [file or directory name]
option  : i(대소문자 구별x) / v(pattern을 포함하지 않는 라인출력) / n(검색결과의 각 행의 선두에 행번호 넣기) / l (파일명만 출력)
               c(패턴과 일치하는 라인의 갯수만 출력) / r (하위 디렉토리까지 검색한다.)  
ex) grep -r -c issue dpkg      : dpkg의 하위디렉토리까지 검색해서 issue라는게 있는 라인의 갯수 출력



Day4
바이너리(binary) = 코드이미지 = 실행파일
- 대부분 저장매체에 저장되어있다.
- 실행 될 땐 헤더파일의 일부분이 메모리에 복사가 된다.
     (cf>폰노이만 구조 -> 모든 코드가 메모리에 올라간 상태에서 한줄한줄 읽으면서 실행)

프로세스 = 실행 중 프로그램
- 실행파일(바이너리)가 실행되려고 메모리에 올라가서 실행이 될 때 프로세스
- 프로세스는 실행파일의 정보를 갖고 있지만, '실행중'이 붙기 때문에 추가정보를 더 요구한다.
    ㄴ가상메모리, 물리메모리(지금 딱 실행하는 코드만 여기에 올림) 정보 : 얘네는 실행파일에 없고 실행 중일때만 생기는 정보
        시스템 리소스 관련정보  : 프로세스가 파일을 열었다면 어떤 파일을 열었는지 등...
        스케쥴링 단위
- 리눅스는 부팅만 해도 2-30개 프로세스가 실행중인게 일반적
    => 프로세스 관리,제어하는 명령어들이 발달돼있다.

foreground process
- 쉘에서 해당 프로세스 실행을 명령한 후, 해당 프로세스 수행 종료까지 사용자가 다른 입력을 하지 못하는 프로세스
- 기본적으로 포그라운드이다. 우리가 ls입력하고 결과 나오기 전까진 다른거 명령어 입력 못함.
ex) 
sudo apt-get install gcc          : root 권한으로 apt-get(패키지 관련하는 서버에 접속해서 패키지 설치,수정,삭제할 때 쓰는 거)
    cf) gcc : gnu프로젝트의 일환. C프로그램 컴파일러
-> vi loop.c  하고 i 눌러서 
#include <stdio.h>
int main(){
     int i=1;
     while(i==1){}
     return 0;
}
하고 esc 누르고 :wq하기( 만약 안되면 sudo vi loop.c로 하기)
-> gcc loop.c -o loop ( 안되면 sudo붙여서)      :     실행파일을 loop로 만들기. ls하면 loop 생긴거 확인가능
-> ./loop      :     현재폴더의 loop파일 실행. 원래 loop만 입력해도 될 수도 있음.
-> 무한루프 돌게된다. ls 명령어 쳐도 아무것도 안나옴. 
-> ctrl + C로 프로세스 실행 강제종료하기 

foreground process 제어하기
- ctrl + Z : foreground 프로세스를 실행 중지 상태(suspend모드)로 변경
- ctrl + (alt +) Z 로 중단된 프로세스는 bg 명령으로 background 프로세스로 실행 될 수 있다.
    ㄴ bg 하면 바로 직전에 stop한 작업 실행 / bg2 하면 두번째 [2] 프로세스를 실행
- jobs 명령어 : 백그라운드로 진행 또는 중지된 상태로 있는 프로세스를 보여줌.
- ctrl + C 는 job로 들어가지 않고 그냥 아예 죽인다.
    ㄴctrl+C하면 OS에서 소프트웨어 인터럽트가 발생하고 , 그거에 해당하는 번호로 동작. 시그널 사용해서 해당 프로세스를 죽여라, 중단해라. 프로세스가 해당 시그널에 대한 동작을 강제로 정의하지 않았으면 프로세스가 만들어질 때 디폴트 동작이 os단에서 정의됨. 그 동작을 하여 중단한다.

background process
- 사용자 입력과 상관없이 실행 되는 프로세스
- 쉘에서 해당 프로세스 실행 시, 맨 뒤에 &를 붙여줌.
find / -name '*.py' > list.txt & [1] 57           
->find찾아라 / 루트폴더 전체에서 name이름이 .py로 끝나는거 찾아서 list.txt에 넣어라. 그리고 [1] 작업번호고 뒤에 57은 프로세스아이디 그걸 실행!

./loop& 입력하면 그거의 작업번호랑 프로세스아이디 나옴 얘는 무한 루프 도는데 그러고 ls 입력하면 결과 나옴!
무한루프 프로세스는 스케쥴링으로 계속 돌고잇음.


프로세스 상태 확인
- ps 치면 프로세스 목록 나온다. ps [options]
- options : -a(시스템 사용하는 모든 사용자의 프로세스 출력) / -u(프로세스 소유자 상세정보 출력) / -l(프로세스 관련 상세정보 출력)
                  -x(터미널에 로긴한 후 실행한 프로세스가 아닌 프로세스도 출력. 주로 데몬 프로세스 확인하기위해. 많이 쓴다.)
                  -e(해당 프로세스와 관련된 환경 변수 정보도 출력) / -f(프로세스 간 관계 정보 출력)
-보통 ps aux (-안써도됨) 이렇게 쓴다.  ps aux | more 로 페이지로 보기
cf ) 데몬(daemon)프로세스 : 사용자 모르게 시스템 관리를 위해 실행되는 프로세스. 부팅될때 자동 실행( ftpd, inetd )
- ps 출력 정보 : command(프로세스) / user(소유자) / pid(프로세스id) / %CPU, %MEM (시분할 시스템이니 1분에 cpu,물리memory 사용 실제 % )
                         VSZ (가상 메모리 얼마나 차지하고 있는지) / RSS(가상메모리에서 페이징 시스템써서 물리메모리에서 쓰고있는 사이즈)
                         STAT(ready, suspended, blocking,...등) / START (시작시간)
- ps 보면 bash는 쉘 프로그램. 로그인하면 실행? 
- ps도 하나의 프로세스니깐 ps도 나옴.

프로세스 중지시키기
kill 명령어 : 보통 강제 종료 옵션 -9와 같이 쓴다.  ex)kill -9 10861      : 뭐 파일 오픈하고 있어서 안됨 이런거 상관없이 10861프로세스 강제종료


리눅스와 파일
- C언어에서 파일로 읽기 하거나 쓰기 할 때 open, read , write, close
- network를 보면 다른 서버와 통신 할 때 쓰기(전송)하거나 읽기한다. 파일과 같군..
- CD도 마찬가지 / 마우스도 쓰기는 안되지만 읽기는 한다. 파일오픈 때 readonly랑 비슷.
=> 결국 파일 처리하는 4가지 인터페이스로 파일 뿐 아니라 다양한 디바이스도 지원할 수 있겠다! 
      프로그래머(OS)가 쓰는 건 저 4가지로 하고 밑에서 각각에게 맡겨두면 일관된 인터페이스로! => 추상화 인터페이스

cf) 추상화 역량을 키워야 새로운 기술들을 익히고 키울 수 있다. 뭐 새로운 기술이 있는데 그거에 대한 아예 정확한 내용은 몰라도(black box) 어떻게 input하고 output하는지만 알면 쓸 수 있다.

- 리눅스에선 모든 디바이스를 파일처럼 다루는거 + 모든 디바이스에 있는 파일들은 무조건 / 루트디렉토리안에 있는 서브디렉토리 파일처럼 접근. 전역네임스페이스

cd /dev : dev는 디바이스 나타내는 디렉토리. 여러가지 디바이스들을 파일처럼 접근할 수 있도록 제공 ex>disk, net네트워크 관련
dev 안에 있는 tty 는 터미널. 터미널 접속할때마다 가상 터미널?디바이스가 생김, 그 가상 디바이스를 매핑한거.
cat tty     : 가상 파일 시스템 인터페이스를 통해서 가상 터미널(디바이스) 환경에 연결 . 이 디바이스에 input주는건 키보드! 내가 kr 이라고 치면 두개 나옴. 첫번째는 내가 친거고 두번째는 내가 친게 가상 터미널 환경 통해서 가상파일 시스템 인터페이스 통해서 tty라는 파일에 저장이 된거. cat이라는 명령 통해서 화면에 나온거! ctrl + c로 나오기

Super block
슈퍼블록은 파일시스템 정보! 전체 사이즈가 몇이냐, 이 파일시스템은 어떤 파일시스템 알고리즘을 썼는지 등등...
이 파일 시스템 안에는 여러 파일(디렉토리)가 있다.

inode 파일들은 inode로 처리 .
파일이름과 매핑되어있음.프로세스가 pid로 매핑되어있는것과 마찬가지.
pid는 PCB같이 프로세스의 상태를 요약해둔 공간이 있는거 처럼 inode도 inode번호 이외에 요약정보를 저장해놓은게 있는데 그게 메타데이터! - 파일권한, 소유자정보, 파일사이즈, 생성시간 등등...

리눅스 파일시스템은
- 결과적으로 추상화!
- input/output이니깐 동일한 기법으로 다룬다.
- 복잡한 기능/자료/데이터 에서 핵심적인 개념/기능으로 간추리는것.
- 모든 디바이스를 파일 인터페이스로 다룬다!
- dentry (directory entry) 모든 파일들은 전역네임스페이스를 쓴다 / (root directory) 덴트리에는 파일이나 서브디렏토리는 각각의 inode가 갖고있다. /home/ubuntu/link.txt
->root directory의 덴트리를 보면 여러가지 파일의 정보가 있는데 거기서 ubutu라는 이름과 inode 값이 있으니 거기로 가고 또 ubuntu 덴트리 보면 안에 여러 정보에서 link.txt의 inode값 이있으니 찾아간다.
- 로그인하면 root디렉토리 안에 home디렉토리 안에 자기 아이디로 된 디렉토리로 로그인된다.
- 루트디렉토리 구조 :
  /media와 /mnt는 새로운 디바이스를 연결했을때 그 관련된 디바이스들이 이 안에 생성 ex)플로피 디스크 ,추가적인SSD(저장매체)
  /etc 는 다양한 설정파일들이 들어가있다.
 /dev /각각의 디바이스 마우스,키보드, 터미널..
 /bin, /sbin 쉘명령어 의 실행파일, PATH설정되어있는 경우 많다.
 /boot 부팅 관련
 /var/ log / 컴퓨터가 동작하다보면 어떤일이 일어났는지를 로그남기는걸 여기에


Day5


cp명령어  : copy의 약자. 물리적복사
cp file2.txt link3.txt          : file2.txt가 llink3.txt로 복사된다.
cp -rf programming/ programming2      : programming 폴더에 있는 하위폴더 다 복사. f는 강하게 복사하는거 막히는거 없이.

rm 명령어 : remove의 약자
rm link3.txt          :     link3.txt 삭제
rm -rf programming2/     :  서브 디렉토리까지 묻지말고 삭제하기.
cf) 폴더만들기 mkdir linkdata

하드링크와 소프트링크
Windows에 파일은 특정 위치에 있는데 바탕화면에 바로가기 만드는거와 비슷.
하드링크
- ln 명령어
- vi link.txt로 아무거나 입력해서 만들고 
  ln link.txt hard.txt               : link.txt 와 hard.txt를 연결. hard.txt는 link.txt와 동일한 내용을 갖는다.
    ㄴ그럼 cp랑 다른게 뭐임 ? ln 으로 만든건 원파일과 inode 번호가 동일하고 같은 inode 구조체를 가르킨다. ls -i 로 확인
                                                cp 된건 inode 번호도 다르고 inode 구조체도 복사되어서 별도로 생긴다.
- 원 파일의 정보를 바꾸면 hard.txt의 파일의 내용도 바뀐다.
- 원 파일이 삭제되도 , hard.txt는 그대로! 원파일 삭제되어도 inode 구조체는 남아있기 때문에. 
                   ㄴ inode 구조체에 link_count라는게 있는게 거기에 몇개의 파일이름과 연결되어있는지 숫자가 있다. 0아니면 삭제 안됨.
- 만약 inode structure가 10GB라 하고 그 파일을 cp한다면 10GB의 공간이 더 쓰이지만 하드링크는 절약된다.

소프트링크 = 심볼릭 링크
-  ln -s로 쓴다 
- 윈도우에 바로가기랑 완전히 동일
- 원본 파일 없어지면 접근 안된다.
- vi link.txt로 대충 하나 만들고
  ln -s link.txt softlink.txt           -> ls -i 하면 inode 다르다 / ls -al 하면 어떤걸로 링크 되어있는지 나오고 앞에 l이 붙는다.
- 원파일 내용 변경하면 같이 변경된다.
- 소프트링크된 파일은 데이터주소를 지칭하는 주소에 원본파일에 대한 정보가 갖고있다. 데이터를 연결하는게 아니고 원본파일에 있는 inode구조체를 가르킨다. 원본파일이 없어지면 리다이렉션이 안되니깐 softlink는 구실을 못한다.


특수파일

디바이스를 가르키는 파일. 디바이스는 파일인터페이스 통해서 입출력처리한다.

cd /dev 하고 ls -al하면 권한에 어떤건 앞에 c ,b /  c는 캐릭터디바이스 , b는 블록디바이스




시스템 프로그래밍의 기반
시스템콜 : 사용자영역에서 커널영역 에 요청에서 제어. 커널도 c언어로 개발되어있어서 시스템콜도 기본적으로 c언어로 되어있음. 그래서 c언어로 프로그래밍 하면 바로 시스템콜 사용할 수있음. 시스템콜 여러개 묶어서 만든거 라이브러리. 시스템콜 c언어 함수 쓰려면 어떤 라이브러리 include하는지 알기!
cf>IDT는 부팅할떄 적어둠.

fork()라는 시스템콜을 process_fork() { .. fork(); ..} 이렇게 wrapping해서 사용자가 쉽게 인터페이스 제공 ->API
이걸 library에 넣어서 사용import해서

cf) 컴파일되어서 이미 바이너리 형태로 있다. 특정 함수를 호출한다면 이걸 다시 컴파일 하지 않고 이 라이브러리의 바이너리에 코드의 실행파일 바이너리를 붙여서 실행파일로 만들다.
동적 라이브러리 : 동적은 실행파일을 만들때 라이브러리 바이너리는 빼고 하고 나중에 실제로 실행할때 그 컴파일된 바이너리가 프로세스에 올려져서 실행
정적라이브러리 : 실행파일에 그냥 라이브러리 바이너리를 붙여서 컴파일. api는 운영프로그램(실행파일)과 분리되어있다. 라이브러리 업뎃할때 실행파일 안건들고 라이브러리만 업뎃하면 된다.

라이브러리의 바이너리는 실행파일과 구분이 될 수있다. 응용프로그램의 코드가 수정없이 다른 os의 라이브러리를 이용해서 os와 통신?할수있다
->하위 호환

리눅스 설치할때 c라이브러리는 설치되어있지만 c컴파일러는 설지안됐을 수도 있다.
sudo apt-get install gcc  (난 저번에 해서 안해도됨 )
gcc --version    :     하면 잘 설치됐는지 볼 수 있다.
gcc -o test.c test         : test.c 소스파일을 컴파일해서 test 실행파일로 생성 -o는 test.c 뒤에 써도됨.
                                     그냥 gcc test.c 라고 만 하면 a.out이라는 실행파일 생기는데 무슨 실행파일인지 헷갈리니깐 별로다.

ABI (Application Binary Interface)
- API는 함수라면 ABI는 함수 실행방식, 레지스터 활용등이 정의됨.
- 함수 인자들을 어느 레지스터에 넣을건지./ 라이브러리와 응용프로그램이 별도의 바이너리를 갖고있는게 어떻게 연결/통신할건지. 다 일일이 정해야하는데 그 정보가 있다.
- 툴체인(컴파일러 만드는 프로그램)에서 컴파일러 만들때 이런 정보들을 정의해서 컴파일러(컴파일러+링커)
- ABI가 동일하면 컴파일도 필요없이 새로운 프로그램(OS?)에서 실행가능

API, ABI다 컴퓨터 만드는 사람들이 중구난방으로 정했었음.표준화 필요-> POSIX로 표준 정함.
