Day1
프로세스 관리

프로그램  = 바이너리 = 코드 이미지 =응용프로그램 = 실행파일
프로세스 = 실행중인 프로그램 ( 메모리적재 + 프로세스 상태 정보 포함)

프로세스ID  (pid)
-pid값은 부호형(signed) 16비트 정수값 -> 15. 2의 15승 = 32768 이 최댓값
     sudo vi /proc/sys/kernel/pid_max               : pid max 값 나온다.
-서버 운영 시 프로세스 엄청 많이 띄워야하는 했는데 프로세스 생성을 어느순간 못하고 있었다
ㄴ pid 값은 unique 하고 max값이 정해져 있어서 pid가 꽉차서 생긴 문제 -> 껐다 켜서 해결
- 32768 넘으면 다시 1부터 안쓰는 pid 사용한다.

- 모든 프로세스는 반드시 독단적으로 생기는 것이 아니고 다른 프로세스의 공간을 카피해서 복사 한 다음에 해당 공간에 실행이미지를 덮어씌우는 형태로 프로세스 만든다. 복사해온 데가 부모process , 복사 한 데가 자식 process = >프로세스 계층이 있다.

부팅 시 컴퓨터가 억지로 프로세스 하나 띄운다 - >이게 init 프로세스
init프로세스 기반으로 모든 프로세스가 만들어진다. like 단군할아버지. pid는 1이다.

ppid = 부모 프로세스ID
ps -ef       : -e 시스템상의 모든 프로세스에 대한 정보 출력 / -f (프로세스 간 관계정보 UID(소유자명),PID,PPID,...나온다)
하면 아래와 같이 나온다.
ubuntu 29725 29609 0 12:53 ? 00:00:00 sshd: ubuntu@pts/0
ubuntu 29726 29725 0 12:53 pts/0 00:00:00 -bash
=>pid와 ppid를 보면 위에가 아래의 부모프로세스인걸 알 수있다.

프로세스와 소유자 관리
- 리눅스 내부에서는 프로세스의 소유자(사용자)와 그룹을 UID/GID(정수)로 관리
- 사용자에 보여줄 때만 UID와 사용자이름 매핑 정보를 기반으로 사용자이름 제공
- 파일 inode나 프로세스 pid가 정수 인거랑 같다. 컴퓨터는 숫자가 편해서
sudo vi /etc/passwd          :     사용자 목록 쭉 나오는데 사용자가 내가 모르는것도 엄청 많은걸 볼 수 있다
    ㄴubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
       사용자 : pw : uid : gid :사용자정보 : home directory : 사용자가 로그인할때 어떤쉘 프로그램 쓰는지
sudo vi /etc/shadow              : 보면 비밀번호 암호화되어서 나와있다.

cf) vi에서 /ubuntu 이러면 ubuntu 문자열 있는데 찾아준다.

pid 관련 시스템콜
getpid()     /     getppid()

mkdir programming      으로 폴더 만들고
vi pidinfo2.c 들어가서 
#include <sys/types.h> #include <unistd.h> #include <stdio.h>
int main() { printf("pid=%d\n",getpid()); printf("ppid=%d\n",getppid()); return 0; }
이쁘게 작성하고 
gcc pidinfo2.c -o pidinfo2      후 ls -al로 확인하고
./pidinfo2      하면 printf 잘 나오는거 볼 수 있다.
=> 이런식으로 우리가 직접 시스템콜 호출해서 ps 와 같은 기능 만들 수도 있다.


프로세스 구조에서
Text(code) 에는 실행이미지(실행코드)가 들어가있다.
BSS,DATA,TEXT는 컴파일 시 결정
HEAP,STACK 코드 실행 시 계속 변경됨.

프로세스 생성 시 어딘가 가상메모리에
1.전체공간 만들고
2. data.bss,text 이미지 업데이트 하고
3.실행 하면서 stack,heap

fork()
- 프로세스 안에 fork()가 위치해있을 것. 실행되면 새로 프로세스 공간(별도 메모리공간) 을 만든다음에 실행중이었던 프로세스를 새공간에 복사.
- 부모와 자식은 완전히 똑같아 보임.
- pid는 다르고 공간도 다르다.
- 복사!
- 부모 프로세스가 완전히 살아있음

- 두 프로세스의 변수 및 PC 값은 동일
- 인자가 없다. 
- return값은 부모 프로세스에선 자기 pid가 나오고 복사된 자식 프로세스같은 경우는 0이 리턴된다. 구분가능. fork실패되면 -1 리턴

ex) vi forktest.c 에서 fork() 예제 코드 입력 후
#include #include #include
int main() { pid_t pid; printf("Before fork() call\n"); pid = fork(); if (pid == 0) printf("This is Child process. PID is %d\n" , pid);
                 else if (pid > 0) printf("This is Parent process. PID is %d\n" , pid); else printf("fork() is failed\n"); return 0; } 
gcc forktest.c -o forktest        
-> 결과보면 fork()전에는 결과 1개, fork()후에는 프로세스가 두개가 된다. 부모랑 자식 결과 다나온다.

exec()
- 프로세스안에 exce() 시스템콜이 있으면 호출하면 현재 exec가 인자로 들어가 있는 프로그램(실행파일)을 읽어서 현재 프로세스 공간에 TEXT,DATA,BSS를 덮어씌운다! 부모 프로세스가 사라진거랑 같다.
- 부모를 덮어씌운다.
- 인자로 실행파일이름을 넣는다 .
- 아예 새로운 실행파일되는거
- 대표적으로 6개 있다....

execl()
가장 직관적이고 쉽다.
execl("디렉토리와 파일이름 합친 전체 이름", argv[0], argv[1],..(명령어 인수 리스트) , NULL)
ㄴexecl 만나는 순간 code영역에 argv[0]의 실행파일이 완전 덮어씌워지고 PC는 그 덮어씌어진 부분부터 시작해서 쭉 실행. 끝 인자는 Null이어야 함.

execltest.c로 테스트해보기 해보면 ls -l과 결과 유사하게 나옴
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
int main()
{
printf("execute ls\n");
execl("/bin/ls","ls","-l", NULL);
perror("execl is failed\n");
exit(1);
}
perror 에러 출력/ exit(1) 에러코드출력 ->코드에서 얘네 실행되면 execl이 에러 난경우. 정상적인 경우엔 실행 안됨

cf>c언어 main함수 int argc , char * argv[] 파라미터 보면 argc는 인자갯수 , argv는 인자 0부터 시작해서 각각 넣어줌.
ls -al 명령하면 argv[0]은 ls /argv[1]은 -al

execlp()
는 excel과 같지만 첫번째 인자가 PATH이용해서 사용하겠다!
execlp("파일 이름" , "명령어 인수 리스트" , "끝은 NULL로 끝나야 함");
execlp("ls" , "ls" , "-al" , NULL);

execle() 는 execlp와 같지만 마지막 인자가 추가됨.
환경변수 지정하고자 할때! 사용자가 path값 안쓰고 환경변수 따로 설정해서 쓰겠다.
execle("ls" , "ls" , "-al" , NULL, envp);
char *envp[] = {"USER=dave" , "PATH=/bin" , (char *)0};
execle("ls" , "ls" , "-al" , NULL, envp);

execv(), execvp(), execve() : 인수리스트 문자열로 하는 경우
execv() ≒ execl()
인수 리스트를 내용으로 하는 문자열 배열
char *arg[] = {"ls" , "-al" , NULL};
execv("/bin/ls" , arg);

execvp() ≒ execlp()
파일 이름을 해당 프로세스를 실행한 프로세스의 환경변수(path)를 검색함
인수 리스트를 내용으로 하는 문자열 배열
char *arg[] = {"ls" , "-al" , NULL};
execvp("ls" , arg);

execve() ≒ execle()
환경 변수를 지정하고자 할때
char *envp[] = {"USER=dave" , "PATH=/bin" , (char *)0};
인수 리스트를 내용으로 하는 문자열 배열
char *arg[] = {"ls" , "-al" , NULL};
execve("ls" , arg, envp);
ex)
char *envp[] = {"USER=DAVE" , NULL};
char *arg[] = {"ls" , "-al" , NULL};
printf("execute ls\n");
execve("/bin/ls" , arg, envp);
perror("execl is failed\n"); exit(1);

인자를 다른 변수로 만들어서 넣을때(execve("ls" ,arg, envp)이렇게 하면)  execve()예제에서 에러난다. 환경변수 설정 제대로 안해줘서! 앞에 환경변수 인자 넣는데 왜안돼? 그냥 아예 원래있는거 안쓰고 변수로 설정해준거 쓰게되서 꼭 설정해줘야함  




fork()로 프로세스 복사해서 if pid=0이면( 자식이면) exec()가 자식 프로세스를 아예 새로운 프로세스로 만들어서 ls 실행
실행 후 부모 프로세스로 다시 돌아온다(부모에서 while문 쓰면 )
-> 이런식으로 명령문들은 fork()로 프로세스 만들고 실행된다고 볼수있다.
=>fork와 execl를 이용해서 리눅스의 자식 프로세스 생성

wait 시스템콜
자식끝났을때 SIGCHID라는 시그널이 부모프로세스에 보내지고 받게되면 wait() 밑에 있는 코드 실행하게된다.


원래는 자식이 어떻게 끝나고 뭐 그런 정보를 메모리에 저장하는데 부모프로세스가 확인하고 자식 프로세스 죽는다. 부모가 자식보다 먼저 끝나면 확인을 못해주니깐 그 정보가 계속 메모리에 떠있게된다. =고아프로세스=좀비프로세스

excel만 사용하면 안됨! 부모가 아예 사라지니깐! fork로 복사한 후 그 안에서 execl 사용해야함.

processchellcodes.zip 에 daveshell.c이랑 daveshell2.c 보기
fgets(buf, MAXLINE -1 , stdin) ;     :키보드 입력 후 엔터하면 stdin(표준입출력)파일에 들어가고 거기서 63bytes 값 갖고온다.
strncmp(buf, "exit\n", 5) ==0         : buf에서 앞에서 5번째 char까지 2번째 인자랑 같으면 !
buf[strlen(buf) -1] =0x00             : 키보드 입력 중 엔터 값은 없애주는거


Day2

프로세스는 프로세스당 4GB 가상 메모리 할당된다.
0~3GB의 User Space는 실행프로그램 이미지가 올라가게 되고, 3~4GB의 Kernel  Space는 커널이미지가 올라가게 된다.

커널은 프로세스마다 1GB씩 있는데 가상메모리시스템과 연결시켜보면 커널에 할당한 가상메모리는 프로세스간 공유된다.

프로세스 생성 시 fokr()로 4GB 프로세스 복사하고 execl() 실행하고 하면 너무 오래걸린다 그래서 copy-on-wirte가 나옴
copy-on-write
- 자식 프로세스 생성 시, 부모프로세스 페이지를 우선 사용 한다.(읽기 시)
- 자식 프로세스가 쓰기를 하게되면 이  때! 필요한 페이지를 복사하고 분리한다.(물리메모리 안에서)
- 자식 프로세스 생성 시, 4GB 다 복사 안한다. 어차피 kernel 1GB는 공유하니깐 복사안하고, read시 에도 부모의 페이지를 자식 페이지테이블에 매핑해놓고 쓰다가, write시 에만 필요한 페이지만 복사하고 자식 페이지테이블에 page pointer 변경만 하면되니깐 공간 엄청나게 절약된다
- 프로세스 생성 시간도 확 줄일 수 있다.
- 새로 생성된 프로세스에 새롭게 할당되어야 하는 페이지 수도 최소화


프로세스 종료 
exit() 시스템콜
#include <stdlib.h>
void exit( int status);
- 인자는 프로세스 종료상태를 나타내는 번호.    0 : 정상 종료 시
- 보통은 비정상 종료일 때 이 함수 호출한다.
- 예를들어 c언어 컴파일하면 main함수가 아닌 _start()함수를 먼저 호출한다. _start()함수 안에 main 함수 실행 코드가 있다.
   return 0  :  _start 함수 안에서 main 함수 밑에 있는 코드를 실행한다.
   exit         : main 밑에 코드도 실행 안하고 프로세스 종료 -> 프로세스 종료 비정상적으로 된다.
    ㄴmain 함수 안에서 둘은 별 차이 없다.
- 리눅스에서 부모에서 fork해서 execl()로 자식 실행되고 종료되면 부모로 다시 돌아와서 자식의 종료상태를 보고 처리
  부모 프로세스는 status & 0377 (비트연산) 계산 값으로 자식프로세스 종료상태 확인 가능
ex) exit (EXIT_SUCCESS) / exit( EXIT_FAILURE)     : EXIT_SUCCESS=0 / EXIT_FAILURE=1
- exit() 주요동작
    : atexit()에 등록된 함수 실행 -> 열려있는 모든 입출력 스트림버퍼(stdin,stdout,stderr) 삭제 -> 프로세스가 오픈한 파일 모두 닫기
     -> tmpfile()함수를 통해 생성한 임시 파일삭제 (순서대로 아님. 순서는 모름)

atexit() 
- 프로세스 종료할 때 실행되어야하는 함수들을 이 시스템콜을 사용해서 등록 할 수 있다.
- return 값이 0이 아니면 실패
- 등록된 함수를 등록된 역순서대로 실행
ret = atexit(exithandling);
if (ret != 0)     perror("Error in atexit\n");
ret = atexit(goodbyemessage);
if (ret != 0)     perror("Error in atexit\n");
exit(EXIT_SUCCESS);
ㄴexit 시 goodbyemessage먼저 실행하고 exithandling이거 그 다음 실행한다.

wait() 시스템콜
- wait() 함수를 사용하여, fork() 함수 호출 시, 자식 프로세스가 종료할 때 까지 부모 프로세스는 기다려야 한다.
- 자식 프로세스가 종료되면 좀비프로세스가 되어, 해당 프로세스 조사를 위한 최소 정보만 갖고 있는 상태가 됨
- 완전히 끝나면 해당 정보도 삭제되고, 부모 프로세스에 SIGCHLD 시그널이 보내진다.
#include <sys/wait.h>
pid_t wait (int *status)
- exit(int status) 는 인자가 status이고 status에 종료상태값을 넣어준다. wait는 status에 해당하는 메모리 공간을 인자로 받는다. os에서 exit 종료상태 넣어줌
- return 값은 종료된 자식 프로세스의 pid 이다.
- int WIFEXITED(status); 매크로를 통해서 결과가 0이 아닌지 체크한다. 0이면 자식프로세스가 비정상 종료했다는 것


스케쥴링 관련 시스템콜
- POSIX라는 규약으로 시스템콜 정의 ( 리눅스는 POSIX호환 OS)

nice()
-우선순위 변경 하는 시스템콜
#include <unistd.h>
int nice (int inc); 
- root 가 소유한 프로세스만 우선순위 높일 수 있다.
- 다른 프로세스는 우선순위 낮출 수만 있다.
- 스케쥴링 방식에 따라 우선순위가 적용될 수도 있고, 안될 수도 있다.

getpriority() / setpriority()
#include <sys/resource.h>
int getpriority(int which, id_t who);
int setpriority(int which, id_t who, int value); 
- 인자에 which : 어떤 자원의 우선순위를 세팅하겠냐는 건데 
         현재프로세스( PRIO_PROCESS) , 현재프로세스 그룹(PRIO_PGRP), 현재 사용자((PRIO_USER )별로 우선순위를 갖고올 수 있다.
    who : 프로세스id . 0쓰면 현재 프로세스(그룹)
    value : 우선순위 값


IPC관련 시스템콜
pipe
- 부모랑 자식이 pipe에 대한 포인터를 갖고있다.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#define MSGSIZE 255
char* msg = "Hello Child Process!";
int main()
{
    char buf[255];
    int fd[2], pid, nbytes;
    if (pipe(fd) < 0)     // pipe(fd) 로 파이프 생성
                exit(1);
    pid = fork();     // 이 함수 실행 다음 코드부터 부모/자식 프로세스로 나뉘어짐
    if (pid > 0) {     // 부모 프로세스에는 자식 프로세스 pid값이 들어감
        printf("parent PID:%d, child PID:%d\n", getpid(), pid);
        write(fd[1], msg, MSGSIZE);             //msg 값을 최대 255size까지 fd[1]에 씁니다.
        exit(0);
    }
    else {         // 자식 프로세스에는 pid값이 0이 됨
        printf("child PID:%d\n", getpid());
        nbytes = read(fd[0], buf, MSGSIZE);             // fd[0]으로 읽고 buf에 데이터 넣어준다
        printf("%d %s\n", nbytes, buf);          // 255 Hello Child Process
        exit(0);
    }
    return 0;
}

메세지큐(Message Queue)
msqid = msgget(key, msgflg)
- 메세지큐 생성

- key는 다른 메시지와 구분된 정수값 /  msgflg는 생성 옵션
     ㄴmsgflg 설정 - IPC_CREAT: 키가 새로운 키면 식별자를 새로 생성,
                                IPC_CREAT|접근권한 이렇게 권한도 줄 수 있다. ex) IPC_CREAT|0644 ‑> rw‑r‑‑r‑‑
msgsnd( msqid , &sbuf , buf_length,  IPC_NOWAIT)
- msqid는 메시지 큐id / &sbuf에 있는 데이타 전송할거다. / buf_length는 얼마만큼 전송할건지 size / 마지막 인자(msgflg )는 모드 
     ㄴmsgflg 설정: 블록 모드(0)  - 데이터 읽을때까지 멈춰있는것 . / 비블록 모드(IPC_NOWAIT) - 상대방이 읽지 않더라도 다음코드 실행

ssize_t msgrcv ( int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg)
-msgrcv(msqid, &rbuf, MSGSZ, 1, 0)
- 첫번째 인자는 큐id / 두번째 인자는 메세지 받을 변수/ 세번째 인자는 얼마만큼 읽을건지 size
     / msgtyp은 0이면 첫번째 메세지 읽고 , 양수면 타입과 맞는 것중 첫번째 읽는다 / msgflg는 모드(블록모드/비블록모드)

ex) msqid = msgget(1234, IPC_CREAT|0644) // key는 1234, msgflg는 옵션
     msgsnd(msqid, &sbuf, buf_length, IPC_NOWAIT)
-------
     msqid = msgget(1234, IPC_CREAT|0644) // key는 동일하게 1234로 해야 해당 큐의 msgid를 얻을 수 있음
     len = msgrcv(msqid, &rbuf, MSGSZ, 1, 0)   // 리턴값은 받은 size?

ipcs 명령어
- 입력하면 메세지큐, 공유메모리, 세마포어 정보가 나온다.
- 결과보면 위에서 만든 메세지 큐도 나온다. 메세지큐는 receive 했다고 해서 없어지는게 아니다.
    =>명시적으로 삭제해줘야함

msgctl ( 메세지큐 id , IPC_RMID , 0 );           :     이 코드 포함한 실행파일 실행하면 ipcs하면 없어진걸  볼 수 있다.


cf) ftok()     :  키 생성을 위한 함수
#include <sys/ipc.h>
key_t ftok(const char *path, int id);  
- 첫번째 인자는 특정 디렉토리명, 파일명 / 두번째는 숫자값 -> 첫번째의inode 값과 두번째 숫자를 조합하여 unique 값 생성
- 메세지 큐에서 key 값 쓸때 쓸 수 있다.


Day3

공유메모리
- 노골적으로 커널 공간에 메모리 공간을 만들어서 쓰는 방식. 여러 프로세스가 접근 가능
- 마치 배열 변수를 만들고 컨트롤 하는거 처럼 얘도 키를 갖고있다.

1. 공유메모리 생성
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
int shmget( key_t key , size_t size , int shmflg );                         //flag 는 메세지큐와 같다. 리턴값은 sgmid
ex) shmget( (key_t)1234, SIZE, IPC_CREATE | 0666))
2. 공유메모리 연결
#include <sys/types.h>
#include <sys/shm.h>
void *shmat( int shmid, const void *shmaddr, int shmflg );
ex) shmaddr = (char * )shmat( shmid, (char *)NULL , 0 )
-shmaddr : 공유메모리 연결주소. 보통 (char *)NULL로 하면 알아서 적절한 주소로 연결
-shmflg : 공유메모리의 읽기/쓰기 권한 (0이면 읽기/쓰기 가능, SHM_RDONLY면 읽기만 가능) 
-리턴값은 성공시 연결된 공유메모리의 시작주소를 리턴
3. 공유메모리 해제
#include <sys/types.h>
#include <sys/shm.h>
int shmdt( char *shmaddr)
-변수에다가 공유메모리 붙어있는 것만 해제 시키는 것! 이거 한다고 공유메모리는 커널메모리에서 없어지는 거 아니고 그 변수자체만
해체되는 것이다.
-> 아예 공유메모리 삭제하려면 
    shmctl( shmid, IPC_RMID, (struct shmid_ds *)NULL ) 사용한다.
    ㄴ두번째 인자 : 수행할 제어 기능. IPC_RMID는 shmid로 지정한 공유메모리 제거 
        세번째 인자 : 제어 기능에 사용되는 공유메모리 구조체의 구조. 보통 0 or NULL
4. 공유메모리 읽기/쓰기 : 마치 포인터 변수처럼 사용하면 된다.
printf( "%s\n", (char *)shmaddr);
strcpy( (char *)shmaddr, "Linux Programming")

cf>/programming/sharedmemory.cㅣ


시그널(signal)
-이번에는 ipc기법으로서의 시그널보단 그냥 시그널 본질에 대해서!
-프로세스에 이벤트 전달하는 기법
-유닉스에서 30년이상 사용된 전통적인 기법
-커널또는 프로세스에서 다른프로세스에 어떤 이벤트가 발생되었는지를 알려주는 기법
ex) ctrl_c 나 ctrl_z는 입력되면 미리 정의되어있는 시그널이 OS에서 해당 프로세스에 전달되고 ,프로세스에서 해당 시그널에 알맞는 디폴트 처리 해준다.
-kill -l           입력하면 시그널 리스트 나온다.
-SIGKILL : 프로세스를 죽여라(강하게) / SIGALARM : 알람을 발생 / SIGSTP: 프로세스 멈춰라( ctrl+z) / SIGCONT : 멈춰진 프로세스 실행하라
 SIGINT : 프로세스에 인터럽트 보내서 프로세스 죽여라(Ctrl+c) / SIGSEGV : 프로세스가 다른 메모리 영역을 침범 / SIGTERM : 프로세스 종료
 SIGUSR1, SIGUSR2 : 어떻게 동작할건지 프로그램안에서 재정의 해서 IPC기법으로 쓴다.
    ㄴ 다음과 같은 동작 설정 가능 : 시그널 무시, 시그널블록 (블록 푸는순간 시그널 처리) / 핸들러로 재정의 등

시그널 보내기 
#include <sys/types.h>
#include <signal.h>
int kill( pid_t pid, int sig)          -- 인자 : 프로세스 pid, 시그널번호
ex) 무한 루프를 도는 파일 loop.c를 ./loop & 이렇게 백그라운드로 돌려놓고,
인자로 pid와 시그널 번호를 받는 sigkill을 실행시키면 ./sigkill 17904 2 이렇게. 그리고 ps하면 loop 죽은거 볼 수 있다.

받은 시그널에 따른 동작정의
#include <signal.h>
void (*signal( int signum, void (*handler)(int) )) (int);
ex) signal( SIGINT, SIG_IGN);                    - SIGINT 시그널 받으면 SIG_IGN 시그널 무시해라. 만약 SIG_DFL이면 디폴트 동작
      signal(SIGINT, (void *)signal_handler))          -    SIGINT 시그널 받으면 정의되어있는 signal_handler 함수 호출해라
- sigloop.c 파일에서 signal 로 SIGINT시 멈추지 않도록 핸들러로 재정의 하고 밑에서는 무한 루프 돌린다음에 백그라운드에서 실행해놓고
  sigkill.c 파일을 이용해서 ./sigkill 17494 2 해도 ps 해보면 sigloop 계속 도는거 볼수있다.

- PCB에 해당 프로세스가 블록 또는 처리해야하는 시그널 관련 정보 관리 한다.
  PCB에 시그널 관련된 몇가지 자료구조가 있다.
    ㄴpending : 프로세스에 시그널이 전달되면, 받은 시그널의 순서를 갖고있다.
        sigpending : block 된 것에 대한 정보
        blocked : 64bit의 간단한 데이타구조. 시그널 갯수가 64개니깐. 1로바뀌는 건 그 시그널이 block 되어있다는 것.
        sig : 각각 시그널 어떤 동작 처리해야하는지, 디폴트할건지, 재정의된거 할건지 이런거에 대해 저장해놓는것.
-커널모드에서 사용자모드로 전환할 때 마지막으로 하는 일 중 하나가 PCB에 있는 시그널 관련 자료구조 파악해서 실행하고 사용자모드로 간다.


쉘 스크립트
쉘 : 운영체제를 사용하기위해 사용자에게 인터페이스 제공하는 프로그램. 쉘에 있는 명령들로 간단한 프로그램 할 수 있다.
-요즘은 perl이나 python언어로 쓰지만 원랜 전통적으로는 쉘스크립트 쓴다.
-쉘스크립트도 쉘마다 조금씩 다른데 우리는 bash 쉘에 맞춰서 공부한다.
-서버작업 자동화 및 운영(DevOps)을 위해 기본적으로는 익혀둘 필요가 있다.
-쉘 명령어를 기본으로 하되, 몇가지 문법이 추가된 형태
- 예를들어 로그파일이 너무 쌓여서 어느순간 서버가 다운되었다먄 해결방법으로 오래된 로그 주기적 삭제하기. crontab 써서
-쉘 스크립트는 파일로 작성 후, 파일을 실행 하는 방법
-쉘 스크립트 파일은 실행권한을 갖고 있어야 한다. (rwx중 w) - 파일 작성후 chmod 777해주기
-일반적으로 '파일이름.sh' 와 같은 형태로 파일 이름을 작성한다.

-파일의 가장 위의 첫 라인은 #!/bin/bash 로 시작!
-여기선 printf가 아닌 echo 쉘 명령어
-주석 할때는 # 으로 
-변수 선언 시 변수명=데이터  ->이 사이에 띄어쓰기 절대 안돼!
  변수 사용 시에는 $변수명       ex) echo $id $name
-리스트 변수 (배열)
    ㄴ 선언 시 변수명=(데이터1 데이터2 데이터3 ...)   - >띄어쓰기로 구분
    ㄴ 사용 시 ${변수명[인덱스번호]}
              ㄴ ${daemons[1]} : 배열의 두번째 값 출력 / ${daemons[@]} : 배열 모든 데이터 출력
                     / ${daemons[*]} : 배열 모든데이터 출력 / ${#daemons[@]} 배열크기 출력
    ex) filelist=($(ls));      echo ${filelist[*]}  ;                    -- filelist=$(ls)  이렇게 해도 되긴 함. 물론 처음에 쓴게 맞는것
cf) 왜 배열은 echo $daemons[1] 이렇게 하면 안돼 ? 이렇게 하면 결과값이 httpd[1] 이렇게 나오는데 왜냐면, $붙이면 뒤에를 변수로 인식은 하는데 배열아닌 그냥 변수로 인식하고 얘는 하나만 결과 나와야하니깐 맨 앞에 있는 값이 나오고 뒤에 [1]은 그냥 문자열로 인식되어서 그렇다. 

- 사전 정의된 지역변수
$$ : 쉘의 프로세스id / $0 : 쉘 스크립트 이름 / $1~$9 : 명령줄 인수 ex) ls -al -z 명령한다면, ls는 $0, -al은 $1, -z는 $2이다.
$* : 모든 명령줄 인수 리스트 / $# : 인수의 갯수 / $? : 최근 실행한 명령어의 종료 값 - 0은 성공, 1~125는 에러 ,126은 파일실행불가, 128~255 시그널 발생
ex )  ./shell.sh ls -al -z 하면 $$:18089  $0:./shell.sh   $1:ls   $2:-al   $*:ls -al -z  $#:3

연산자 - 숫자계산
-expr을 사용, 역작은 아포스트로피(`) 사용해야함.
-연산자 * 와 괄호() 앞에는 역슬래시 사용하기
-연산자와 숫자, 변수, 기호 사이에는 space넣어야함!
ex) num=`expr \( 3 \* 5 \) / 4 + 7`             echo $num

 조건문
if [ 조건 ] 
then
    명령문                    --명령문 꼭 탭으로 안 띄워도 됨. 걍 then이랑 fi 사이만 있으면 된다.
else
    명령문
fi
ex ) 인자 두개 비교 if [ $1 != $2 ] 

- 조건 : ==(일치) / != (불일치) / -z 문자 (문자가 null이면 참 ) / -n 문자 ( 문자가 null 아니면 참)
- 수치비교 : < >가 정상 동작하기도 하지만 가끔 안될 수도.( 안될때도 [[]] 안에 넣으면되기도 함.)
    값1 -eq 값2 / 값1 -ne 값2 / 값1 -lt 값2 / 값1 -le 값2 / 값1 -gt 값2 / 값1 -ge 값2
- 파일검사 
    -e 파일명 (파일 존재하면 참) / -d 파일명 (파일이 디렉토리면 참) / -h 파일명 (심볼릭(소프트) 링크파일) / -f 파일명 (파일이 일반파일이면 참)
    -r 파일명 (읽기가능이면 참) / -s 파일명 (파일크기 0아니면 참) / -u 파일명 (파일이 set-user-id가 설정되면 참) / -w 파일명 (쓰기가능이면 참)
    /-w 파일명 (실행가능이면 참)      ex) if [ -e $1 ]
- 논리연산
    조건1 -a 조건2 (and조건) / 조건1 -o 조건2 (or조건) / 조건1 && 조건2 / 조건1 || 조건2 / !조건 / true / false
-조건문 한 줄에 작성하기  :      if [ 조건 ] ; then 명령문 ; fi

cf) ping
쉘스크립트는 대부분 서버에서 쓴다. 서버는 여러개 컴퓨터가 인터넷으로 연결되어있다. 각각 ip주소가 있다. 연결되어있는 어떤 컴퓨터가 살아있는지 비정상적인지 확인하고 싶다. -> 해당 컴퓨터의 ip주소로 ping명령어 실행 -> 정상 컴퓨터는 이 명령 받으면 나 살아있다고 보내준다.
- 보통 성공하면 해당 컴퓨터 추가 요청. 실패하면 다른 컴퓨터 사용으로 바꾼다.
ping -c 1 192.168.0.1 1> /dev/null
ㄴ  -c 1 : 1번만 체크하라는 것. 안쓰면 1초에 10번 이렇게 반복해서 한다 
      1>  : 표준 출력을 /dev/null로 한다는 것. /dev/null은 아무것도 안나오게 하는 것
  cf ) if [ $? == 0 ]    -> 최근 명령어의 결과값이 0이면 성공. 아니면 실패  


반복문
- for문
for 변수 in 변수값1 변수값2  ...
do
    명령문
done
ex) for item in $(ls) ; do echo $item ; done      - 이런식으로 한줄 가능

-while문
while [ 조건문 ]
do 
    명령문
done
ex) 
#!/bin/bash
lists=$(ls)
num=${#lists[@]}
index=0
while [ $num -ge 0 ]
do
     echo ${lists[$index]}
     index=`expr $index + 1`
     num=`expr $num - 1`
done

압축명령 tar
- 리눅스에선 여러파일을 한 파일로 묶은 것을 아카이브(archive)라고 한다. 파일 확장자는 .tar
- 리눅스에서 파일 압축은 두 단계로 진행 1.아카이브로 만듦 2. gzip 프로그램 사용해서 압축함 -> 파일 확장자는 .tar.gz
- 압축 명령어는 tar로 사용하고, 옵션을 사용해서 gzip기능 사용
- 주요옵션 : x(묶음해제) / c(파일 묶음) / v(묶음/해제 과정 화면에 표시) / z(gunzip사용) / f(파일이름지정)
- 압축 시 주로     tar -cvzf 압축된파일이름 압축할파일이나폴더명
- 압축 풀 때 주로     tar -xvzf 압축해제할압축아카이브명 
ex)백업하기 - backup.sh
if [ -z $1 ]||[ -z $2 ]; then                 //첫번째 인자나 두번째인자가 null이면
     echo usage: $0 sourcedir targetdir         //실제결과 -> usage: ./backup.sh sourcedir targetdir
else
     SRCDIR=$1
     DSTDIR=$2
     BACKUPFILE=backup.$(date +%y%m%d%H%M%S).tar.gz    // 파일명 unique하게 생성
     if [ -d $DSTDIR ]; then                           //저장하려는 이름의 폴더가 있으면 mkdir안해도 됨
         tar -cvzf $DSTDIR/$BACKUPFILE $SRCDIR
     else
         mkdir $DSTDIR
         tar -cvzf $DSTDIR/$BACKUPFILE $SRCDIR
     fi
fi
-> ./backup.sh if.sh abc  하니깐 해당 루트에 abc 폴더가 생겼고, 해당 폴더에는 backup.210102130935.tar.gz 파일이 생겼다.

ex)로그파일 정리하기 1. 로그파일 2일 이상된거 압축하기 2.압축로그파일 3일이상된건 삭제하기 => 사이즈 절약
    cf) find . -type f -name '파일명검색어' -exec bash -c "명령어1; 명령어2; 명령어3;" \;      - 찾을때 쓰는것. -type f: 파일타입지정해서 검색(f는 일반파일)
LOGDIR=/var/log
GZIPDAY=1
DELDAY=2
cd $LOGDIR
echo "cd $LOGDIR"
sudo find . -type f -name '*log.?' -mtime +$GZIPDAY -exec bash -c "gzip {}" \; 2> /dev/null
sudo find . -type f -name '*.gz' -mtime +$DELDAY -exec bash -c "rm -f {}" \; 2>  /dev/null
-- find는 sudo 붙여서 사용. find . 현재 파일에서 찾아라. -type f 일반파일중에 -name 이름이 검색어에 해당하는. -mtime 기록시간이 변수+ 일 이상 경과한 파일 찾아라 .그리고 명령어를 실행한다.  gzip {} 파일들을 하나씩 갖고와서 압축해라. 



Pthread
- thread 표준 API : POSIX 스레드 또는 피스레드라고 부름
- 저수준 API로 100여개의 함수 제공. 복잡하지만 유닉스 시스템 핵심 스레딩 라이브러리. 표준화된 스레드 함수
- 다른 스레딩 솔루션도 결국 Pthread 기반으로 구현되어있음. 익혀두면 좋다.
- <pthread.h> 헤더파일에 정의 필요
- 모든 함수는 pthread_ 로 시작한다.
- 크게 두가지 그룹으로 나뉜다 1.스레드관리:생성,종료,조인,디태치 함수 등  2.동기화:뮤텍스 등 동기화 관련 함수
- pthread 에는 세마포어가 포함되지 않는다. 
- gcc로 컴파일할 때 -pthread 옵션 명시 필요 .원래는 기본 라이브러리인 glibc에 다 있었는데 피스레드는 libpthread 라이브러리에 따로 있어서!
     ex)gcc -pthread test.c -o test

1.스레드 생성
int  pthread_create( pthread_t *thread , const pthread_attr_t *attr , void *(*start_routine)(void *) , void *arg );
첫번째 인자 : 해당 스레드를 가르킬 수 있는 포인터. pthread_t 타입으로 미리 변수 선언되어있어야 한다.
두번째 인자 : 스레드에 특정한 설정 할 때 쓰는데 거의 안씀 / 세번째 인자 : 스레드 실행 시 실행할 함수 / 네번째인자 : 세번째 함수의 인자
리턴값은 0이면 성공, 아니면 fail
ex) pthread_t thread1;
void *thread_function(void *ptr);
ret = pthread_create(&thread1, NULL, thread_function, (void*)message1);
cf)pthread_create의 두번째 인자에 detach나 join관련 설정도 해줄수 있다.
2.스레드 종료
void pthread_exit( void *retval)
코드 끝나면 프로세스 종료되는 거니깐 잘 안쓴다. 강제로 할 때만 쓴다. exit와 비슷. 
인자는 메인스레드에 상태값 전달하는 것. NULL 아님 0

3.스레드 조인
- 프로세스가 실행되면 디폴트로 스레드 하나가 저절로 생긴다. 그게 메인 스레드!
  프로세스 안에서 pthread_create() 로 스레드1,2 생성했다면 스레드 1이 실행되고 끝나서 메인 스레드의 나머지 코드 실행하고 끝났는데 스레드2는 아직 끝나지 않으면 안되니깐 기다려야함. 그래서 조인을 쓴다.
int pthread_join( pthread_t thread , void **thread_return );
-인자는 기다릴 스레드의 포인터와 스레드 끝났을 때의 값들을 받을 변수
ex)pthread_join(p_thread, (void *)&status);
printf("thread join : %d\n" , status);                 //p_thread 식별자를 가진 스레드의 종료를 기다리고, status포인터로 종료값을 가져옴.

-pthreadsimple.c
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
void *thread_function(void *ptr){
    char *message;
    message = (char *) ptr;
    printf("%s \n",message);
    pthread_exit((void *)100);                              //임의로 그냥 리턴값 100으로
}
int main(){
    pthread_t thread1, thread2;
    const char *message1 = "Thread1";
    const char *message2 = "Thread2";
    int ret, status;

    ret = pthread_create(&thread1, NULL, thread_function,(void *)message1);
    printf("%d", ret);
    if(ret==0){
        printf("pthread_create returns %d\n",ret);
    }else{
        printf("pthread_create returns error %d\n",ret);
        exit(1);
    }
    ret = pthread_create(&thread2, NULL, thread_function,(void *)message2);
    printf("%d", ret);
    if(ret==0){
        printf("pthread_create2 returns %d\n",ret);
    }else{
        printf("pthread_create2 returns error %d\n",ret);
        exit(1);
    }
    pthread_join(thread1,(void **)&status);
    printf("thread1 returns : %d\n",status);          //thread1 returns : 100
    pthread_join(thread2, (void **)&status);
    printf("thread2 returns : %d\n",status);
    return 0;
}

4.스레드 디태치
int pthread_detach(pthread_t thread);
메인 스레드가 있고 스레드1,2,3이 있다면
리소스 측면 : pthread_create로 생성했다면 리소스 측면에서 스레드 1,2,3 끝났다고 해도 메인 스레드가 끝나지 않는 이상 스레드1,2,3이 잡고있는 리소스(메모리영역/변수) 는 해제되지 않는다. 만약 스레드 100개가 있고 각자 갖고있는 자원이 1000개 이러면 그 메모리 공간을 계속 낭비하는 것!
->해제 시키려면
    1)pthread_join 쓰는 방법 : 메인스레드에서 해당 스레드가 종료되고 해당스레드의 자원이 없어지고, 종료 상태값으로 추가처리까지 하겠다는 의미
    2)pthread_detach 쓰는 방법 : 해당 스레드 종료되면 바로 해당 스레드 리소스 해제
실행측면
    1) join은 join다음에 있는 코드는 thread1이 종료될 때까지 기다려야 한다.
    2)detach는 detach함수 다음 코드는 인자의 스레드가 종료될때까지 기다리지 않는다. 그냥 detach함수 호출하고 바로 밑에 코드 실행한다.
코드에서 맨마지막은 굳이 detach 안써도 종료되니깐 안써도 되긴한다.

5. 동기화
pthread_mutex_t mutex_lock = PTHREAD_MUTEX_INITIALIZER;     이렇게 변수선언하고
pthread_mutex_loc( mutex_lock);     해서 임계영역 보호
pthread_mutex_unlock(pthread_mutex_t *mutex);          임계영역 해제

pthreadmutex.c
#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

pthread_mutex_t mutex_lock = PTHREAD_MUTEX_INITIALIZER;
int g_count=0;

void *t_function(void *data){
    char* thread_name= (char*)data;
    pthread_mutex_lock(&mutex_lock);               //임계영역 설정안하면 결과가 마구잡이 
    printf("%s start\n",thread_name);
    for(int i=0; i< 10000000; i++){
        g_count++;
    }
    printf("%s, g_count = %d\n",thread_name, g_count);
    pthread_mutex_unlock(&mutex_lock);
}
int main(){
    pthread_t p_thread1, p_thread2;
    int status;
    pthread_create(&p_thread1 , NULL , t_function, (void *)"Thread1");
    pthread_create(&p_thread2, NULL, t_function, (void *)"Thread2");
    pthread_join(p_thread1,(void *)&status);
    pthread_join(p_thread2,(void *)&status);
}
pthreadmutex.c 파일 실행하면 thread1을 먼저 선언했지만 내부 스케쥴러에 의해서 thread2가 먼저 실행됨



Day5
메모리와 파일 시스템 관련
malloc()  : heap 영역에 동적메모리 생성. malloc 계열의 여러 파생함수가 있다 <->free()로 동적메모리 해제

mmap (Memory Mapped File)
-파일있고 메모리 있고 프로세스 있다면 , 프로세스에서 파일을 읽고 쓰는 건 굉장히 오래 걸린다 (시스템콜, 스케쥴러, 인터럽트 등 필요-os단에서도 관여)
  DMA, SystemBus 쓴다던지 한다(검퓨터구조 측면에서) 
  ->파일액세스 하는거 최대한 줄이기 위해서 쓰는 함수 mmap
-파일을 메모리의 특정공간에 매핑시켜 놓는 것이다.
-프로세스는 파일이 아닌 메모리의 공간을 액세스 하면 되니깐 시스템콜,스케쥴러,인터럽트,DMA등 다 필요 없다.

#include <sys.mman.h>
void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset)
첫번쨰인자 : 이 파일의 어디서부터 매핑할건지. 보통 0 or NULL / 두번째 인자 : 어느 사이즈 만큼 매핑할건지
세번째인자 : 이 매핑된 메모리의 권한 설정 . 읽기만 가능인지 쓰기만 가능인지. 보통 PROT_READ | PROT_WRITE 이렇게 쓰는게 일반적이다.
                      PROT_READ(읽기 가능) / PROT_WRITE(쓰기 가능) / PROT_EXEC(실행 가능) / PROT_NONE(접근 불가)
네번째인자 : 메모리 주소공간을 어디가가 할건지. MAP_PRIVATE은 4GB의 프로세스 안에다가 만들어 놓는 것.
                     MAP_SHARED(다른 프로세스와 공유 가능) / MAP_PRIVATE(프로세스 내에서만 사용 가능) / MAP_FIXED(지정된 주소로 공간 지정)
다섯번째인자 : 어떤 파일 매핑 시킬건지
여섯번째인자 : 변위. 첫번째인자가 0이고 두번째 인자가 5고, 여섯번째 인자가 10이면, 파일에서 0부터 시작해서 10만큼 떨어져있는 공간에서 사이즈 5만큼 매핑 시킨다.
리턴값 :  해당 메모리의 주소. 

-실제 동작
1. mmap 쓰면 가상메모리 특정한 부분에 파일주소가 매핑되는데, 그 부분은 페이지 #번 부터 페이지$번까지 할당된다. 
   페이지 디렉토리를 여러개 만들어놓고 그 중 사용 디렉토리만 페이지 테이블을 구성해서 사용한다.
    ->가상메모리에 매핑한 페이지에 관련된 페이지 디렉토리의 페이지테이블도 당연 생길 수 있다.
2. 해당 메모리 접근 시 요구페이징 (lazy allocation ) - 파일에 있는 걸 메모리에 올리거나, 또 다른 메모리에 있는 걸 메모리에 올리거나 할때 시간 오래걸리니깐 꼭 필요할때 올리는 것. 그리고 OS에서 file data 복사해서 물리 메모리 페이지에 넣어준다.
3.메모리 read 시 : 해당 물리 페이지 데이터를 읽으면 된다 
4. 메모리 write 시 : 해당 물리 페이지 데이터 수정 후 페이지 상태 flag중 dirty bit를 1로 수정
5. 파일 close 시 ,물리 페이지 데이터가 file에 업데이트 된다.

장점 : read(),write() 시 반복적인 파일 접근을 방지하여 성능 개선 
         매핑된 영역은 파일 처리를 위한 lseek()사용하지 않고 간단한 포인터 조작으로 탐색. 메모리에 올리면 메모리 변수 접근 하듯이 쉽게.
    cf ) lseek() : 파일에서 해당 데이터가 있는 주소를 파일 액세스해서 찾아가는 것. 엄청 오래걸린다.
단점 : mmap은 페이지 사이즈 단위로 고정된 사이즈로 매핑하니깐 쓸데없는 공간까지 추가 할당해서 채워서 매핑하는 경우가 있다.

mmap으로 매핑된 데이터를 강제로 해제
int munmap(void *addr, size_t length)
addr에 매핑된 물리 메모리 주소를 해제. lenth는 mmap에서 지정했던 메모리의 크기와 동일하게.

만약 메모리의 값이 변경되면 해당 파일에 써줘야하는데 이를 강제적으로 해주는 것이 msync
int msync(void *start, size_t length, int flags);
첫번째인자 : mmap()통해 리턴받은 메모리맵의 시작 주소 / 두번째 인자 : 동기화 할 길이. 필요한 만큼만 할 수 있으니깐
세번째 인자 - MS_ASYNC: 비동기 방식, 동기화(Memory‑>File)하라는 명령만 내리고 결과에 관계 없이 다음 코드 실행
                                         (따라서, 동기화가 완료안된 상태로 다음 코드 실행 가능)
                     MS_SYNC: 동기 방식, 동기화(Memory‑>File)가 될 때까지 블럭 상태로 대기
                     MS_INVALIDATE: 현재 메모리 맵을 무효화하고 원래 파일의 데이터로 갱신. 즉 File‑>Memory. 

- stat함수
stat 함수 : path정보 포함한 해당파일 이름 넣고, stat구조체로 정의 된 변수 넣으면 구조체 변수에 inode 자료구조 데이터가 입력된다.
fstat 함수 :  파일이름이 아닌 파일 descript(파일자체?)를 넣는게 다름. stat계열함수
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
int stat(const char *path, struct stat *buf);
int fstat(int filedes, struct stat *buf); 
ex) fstat( fd, $fileInfo)   : fd 해당 파일을 fileinfo 이름의 stat구조체에 넣어주는 함수.-> 파일을 배열변수 쓰 듯이 한다.


-mmapwrite.c
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <string.h>

int main(int argc, const char *argv[])
{
    struct stat fileInfo;
    char *filepath = "link.txt";
    char *update = "hello mmap!";
    int fd = open(filepath, O_RDWR, (mode_t)0600);
    if (fd == -1) {
        perror("Error opening file for writing");
        exit(EXIT_FAILURE);
    }
    fstat(fd, &fileInfo);
    printf ("%ld\n", fileInfo.st_size);
    char *map = mmap(0, fileInfo.st_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if (map == MAP_FAILED) {
        close(fd);
        perror("Error mmapping the file");
        exit(EXIT_FAILURE);
    }
    printf ("%ld", strlen(update));
    for (size_t i = 0; i < strlen(update); i++) {
        printf("Writing character %c at %zu\n", update[i], i);
        map[i] = update[i];
    }
    if (msync(map, fileInfo.st_size, MS_SYNC) == -1) {                    //msync랑 munmap 안해도 괜찮다. 어차피 프로세스 종료되면 자동으로 sync된다.
        perror("Could not sync the file to disk");
    }
    if (munmap(map, fileInfo.st_size) == -1) {
        close(fd);
        perror("Error un-mmapping the file");
        exit(EXIT_FAILURE);
    }
    close(fd);
    return 0;
}
실행 후 link.txt 보면 앞부분에 hello mmap 문자열 들어간 걸 볼 수 있다.

inode 구조체가 중요! 프로세스가 프로세스마다 pid가 존재하고 그 정보를 가진 pcb가있는거처럼 파일도 각 파일마다 inode번호가있고 그 inode 번호 에 대응하는 inode 구조체가 있다. mode는 파일종류/권한   

-stat 구조체
struct stat {
     dev_t     st_dev;     /* ID of device containing file */
     ino_t     st_ino;     /* inode number */
     mode_t     st_mode;     /* 파일 종류 및 접근권한 */
     nlink_t     st_nlink;     /* hardlink 된 횟수 */
     uid_t     st_uid;     /* 파일 owner */
     gid_t     st_gid;     /* group ID of owner */
     dev_t     st_rdev;     /* device ID (if special file) */
     off_t     st_size;     /* 파일 크기(bytes) */
     blksize_t     st_blksize;     /* blocksize for file system I/O */
     blkcnt_t     st_blocks;     /* number of 512B blocks allocated . 512byte 기준으로 불록 갯수.  inode 구조체에 보면 direct blocks에 연결되어있는*/
     time_t     st_atime;     /* time of last access */
     time_t     st_mtime;     /* time of last modification */
     time_t     st_ctime;     /* time of last status change */     }; 
ex)
struct stat buf;
ret = stat("link.txt", &buf);
printf("%ld %ld ",buf.st_dev, buf.st_ino )


#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(int argc, char** argv){
    char buf[255];
    FILE* fp;
    if(argc == 2){
        fp=fopen(argv[1], "r");
        if(fp == NULL){
            fputs("file open error",stderr);
            exit(0);
        }
    }else{
        fp = stdin;
    }
    while(fgets(buf, 255, fp) != NULL){
        fputs(buf,stdout);
        }
}

stdtest.c 보면 인자 들어오면 파일 읽고 안들어오면 FILE* fp = stdin ; 표준입출력.
표준입력도 파일로 볼 수 있다 입력을 키보드라 치면 fgets(buf,255,fp) 키보드 치는걸 255사이즈 만큼 buf 에 데이터 받아온다
fputs ( buf, stdout ) stdout도 일종의 파일. buf를 stdout이라는 파일에 써주는거니깐 터미널화면에 출력된다.
실행해보면 ./stdtest 하면 내가 1111치면 1111나온다. stdin으로 들어가서 stdin파일에 저장된걸 stdout으로 나오는거
